// –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–û–∫–æ–Ω–Ω—ã–µ –ú–∞—Å—Ç–µ—Ä–∞"
// –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤: API, Frontend, Mobile, Security, Performance

let comprehensiveTestResults = [];
let comprehensivePassedTests = 0;
let comprehensiveFailedTests = 0;
let currentTest = 0;

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
function logComprehensiveTest(testName, success, details = '', category = 'general') {
    const timestamp = new Date().toLocaleTimeString('ru-RU');
    const result = {
        name: testName,
        success: success,
        details: details,
        category: category,
        timestamp: timestamp
    };
    
    comprehensiveTestResults.push(result);
    
    // –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏
    console.log('='.repeat(80));
    console.log(`üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢: ${testName}`);
    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}`);
    console.log(`‚è∞ –í—Ä–µ–º—è: ${timestamp}`);
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${success ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù'}`);
    console.log(`üìù –î–µ—Ç–∞–ª–∏: ${details}`);
    console.log(`üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${currentTest + 1} —Ç–µ—Å—Ç–æ–≤`);
    console.log('='.repeat(80));
    
    if (success) {
        comprehensivePassedTests++;
        console.log(`‚úÖ ${testName}: ${details}`);
    } else {
        comprehensiveFailedTests++;
        console.log(`‚ùå ${testName}: ${details}`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    updateComprehensiveTestResults();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
function showComprehensiveTestResults(message, type = 'info') {
    console.log('üìä showComprehensiveTestResults –≤—ã–∑–≤–∞–Ω–∞:', message, type);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const statusElement = document.getElementById('testStatus');
    const statusTextElement = document.getElementById('testStatusText');
    
    if (statusElement && statusTextElement) {
        statusElement.style.display = 'block';
        statusTextElement.textContent = message;
        statusElement.className = `alert alert-${type === 'success' ? 'success' : type === 'error' ? 'danger' : type === 'warning' ? 'warning' : 'info'}`;
    }
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    const resultsContainer = document.getElementById('testResults');
    if (resultsContainer) {
        resultsContainer.scrollIntoView({ behavior: 'smooth' });
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function updateComprehensiveTestResults() {
    const container = document.getElementById('testResultsContent');
    if (!container) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç testResultsContent –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    const successRate = Math.round((comprehensivePassedTests / (comprehensivePassedTests + comprehensiveFailedTests)) * 100);
    const statusClass = comprehensiveFailedTests === 0 ? 'success' : 'warning';
    
    let html = `
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="fas fa-vial"></i> –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h5>
                <div>
                    <button class="btn btn-sm btn-outline-primary me-2" onclick="copyComprehensiveResults()">
                        <i class="fas fa-copy"></i> –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn btn-sm btn-outline-secondary" onclick="hideComprehensiveResults()">
                        <i class="fas fa-times"></i> –°–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="alert alert-${statusClass}">
                    <h6><i class="fas fa-chart-bar"></i> –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h6>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ:</strong> ${comprehensivePassedTests}
                        </div>
                        <div class="col-md-3">
                            <strong>‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ:</strong> ${comprehensiveFailedTests}
                        </div>
                        <div class="col-md-3">
                            <strong>üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</strong> ${successRate}%
                        </div>
                        <div class="col-md-3">
                            <strong>‚è∞ –í—Ä–µ–º—è:</strong> ${new Date().toLocaleString('ru-RU')}
                        </div>
                    </div>
                </div>
                
                <div class="mt-3">
                    <h6><i class="fas fa-list"></i> –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</h6>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>–¢–µ—Å—Ç</th>
                                    <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                                    <th>–°—Ç–∞—Ç—É—Å</th>
                                    <th>–î–µ—Ç–∞–ª–∏</th>
                                    <th>–í—Ä–µ–º—è</th>
                                </tr>
                            </thead>
                            <tbody>
    `;
    
    comprehensiveTestResults.forEach(result => {
        const statusIcon = result.success ? '‚úÖ' : '‚ùå';
        const statusClass = result.success ? 'success' : 'danger';
        const categoryIcon = getCategoryIcon(result.category);
        html += `
            <tr>
                <td><strong>${result.name}</strong></td>
                <td><span class="badge bg-secondary">${categoryIcon} ${result.category}</span></td>
                <td><span class="badge bg-${statusClass}">${statusIcon}</span></td>
                <td><small>${result.details}</small></td>
                <td><small>${result.timestamp}</small></td>
            </tr>
        `;
    });
    
    html += `
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    container.innerHTML = html;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function createComprehensiveTestContainer() {
    const container = document.createElement('div');
    container.id = 'comprehensiveTestResults';
    container.className = 'container-fluid mt-4';
    
    const mainContent = document.querySelector('.container-fluid');
    if (mainContent) {
        mainContent.appendChild(container);
    } else {
        document.body.appendChild(container);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getCategoryIcon(category) {
    const icons = {
        'api': 'üîå',
        'frontend': 'üñ•Ô∏è',
        'mobile': 'üì±',
        'security': 'üîí',
        'performance': '‚ö°',
        'general': 'üß™'
    };
    return icons[category] || 'üß™';
}

// === API –¢–ï–°–¢–´ ===

// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç API
async function testAPIComprehensive() {
    try {
        console.log('üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...');
        
        const baseUrl = window.location.origin;
        const endpoints = [
            { name: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', url: '/api/auth/check' },
            { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', url: '/api/users' },
            { name: '–ó–∞–∫–∞–∑—ã', url: '/api/orders' }
        ];
        
        let successfulTests = 0;
        const results = [];
        
        for (const endpoint of endpoints) {
            try {
                const response = await fetch(`${baseUrl}${endpoint.url}`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const data = await response.json();
                const success = response.ok;
                
                if (success) {
                    successfulTests++;
                    results.push(`${endpoint.name}: OK`);
                } else {
                    results.push(`${endpoint.name}: ${response.status}`);
                }
            } catch (error) {
                results.push(`${endpoint.name}: –û—à–∏–±–∫–∞`);
            }
        }
        
        const success = successfulTests >= 2;
        logComprehensiveTest('API –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π', success, 
            `–£—Å–ø–µ—à–Ω—ã—Ö: ${successfulTests}/${endpoints.length}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${results.join(', ')}`, 'api');
        return success;
    } catch (error) {
        logComprehensiveTest('API –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π', false, `–û—à–∏–±–∫–∞: ${error.message}`, 'api');
        return false;
    }
}

// === FRONTEND –¢–ï–°–¢–´ ===

// –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function testFrontendInitialization() {
    try {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...');
        
        const app = window.app;
        const WindowRepairApp = window.WindowRepairApp;
        const hasMethods = app && typeof app.showOrderCards === 'function';
        
        // –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ app –∏ –º–µ—Ç–æ–¥–æ–≤
        const success = !!(app && hasMethods);
        
        logComprehensiveTest('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞', success, 
            `app: ${app ? '–¥–∞' : '–Ω–µ—Ç'}, WindowRepairApp: ${WindowRepairApp ? '–¥–∞' : '–Ω–µ—Ç'}, –º–µ—Ç–æ–¥—ã: ${hasMethods ? '–¥–∞' : '–Ω–µ—Ç'}`, 'frontend');
        return success;
    } catch (error) {
        logComprehensiveTest('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞', false, `–û—à–∏–±–∫–∞: ${error.message}`, 'frontend');
        return false;
    }
}

// –¢–µ—Å—Ç DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function testFrontendDOM() {
    try {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');
        
        const elements = ['mainApp', 'loginScreen', 'newOrderModal'];
        let foundElements = 0;
        
        elements.forEach(id => {
            if (document.getElementById(id)) {
                foundElements++;
            }
        });
        
        const success = foundElements >= 2;
        
        logComprehensiveTest('DOM —ç–ª–µ–º–µ–Ω—Ç—ã', success, 
            `–ù–∞–π–¥–µ–Ω–æ: ${foundElements}/${elements.length}`, 'frontend');
        return success;
    } catch (error) {
        logComprehensiveTest('DOM —ç–ª–µ–º–µ–Ω—Ç—ã', false, `–û—à–∏–±–∫–∞: ${error.message}`, 'frontend');
        return false;
    }
}

// === MOBILE –¢–ï–°–¢–´ ===

// –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
function testMobileResponsive() {
    try {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
        
        const viewport = document.querySelector('meta[name="viewport"]');
        const hasViewport = !!viewport;
        
        const bootstrapClasses = ['container', 'row', 'col-12', 'col-sm-6', 'col-md-3'];
        let foundClasses = 0;
        
        bootstrapClasses.forEach(className => {
            if (className.includes('-')) {
                if (document.querySelectorAll(`[class*="${className}"]`).length > 0) {
                    foundClasses++;
                }
            } else {
                if (document.querySelectorAll(`.${className}`).length > 0) {
                    foundClasses++;
                }
            }
        });
        
        const success = hasViewport && foundClasses >= 3;
        
        logComprehensiveTest('–ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å', success, 
            `Viewport: ${hasViewport ? '–¥–∞' : '–Ω–µ—Ç'}, Bootstrap –∫–ª–∞—Å—Å–æ–≤: ${foundClasses}/${bootstrapClasses.length}`, 'mobile');
        return success;
    } catch (error) {
        logComprehensiveTest('–ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å', false, `–û—à–∏–±–∫–∞: ${error.message}`, 'mobile');
        return false;
    }
}

// === SECURITY –¢–ï–°–¢–´ ===

// –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function testSecurity() {
    try {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
        
        const isHTTPS = window.location.protocol === 'https:';
        const hasCSP = document.querySelector('meta[http-equiv="Content-Security-Policy"]');
        const hasInlineScripts = document.querySelectorAll('script:not([src])').length > 0;
        
        const success = isHTTPS || !hasInlineScripts; // HTTPS –∏–ª–∏ –Ω–µ—Ç inline —Å–∫—Ä–∏–ø—Ç–æ–≤
        
        logComprehensiveTest('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', success, 
            `HTTPS: ${isHTTPS ? '–¥–∞' : '–Ω–µ—Ç'}, CSP: ${hasCSP ? '–¥–∞' : '–Ω–µ—Ç'}, Inline —Å–∫—Ä–∏–ø—Ç—ã: ${hasInlineScripts ? '–¥–∞' : '–Ω–µ—Ç'}`, 'security');
        return success;
    } catch (error) {
        logComprehensiveTest('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', false, `–û—à–∏–±–∫–∞: ${error.message}`, 'security');
        return false;
    }
}

// === PERFORMANCE –¢–ï–°–¢–´ ===

// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function testPerformance() {
    try {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
        
        const startTime = performance.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
        const navigation = performance.getEntriesByType('navigation')[0];
        let loadTime = 0;
        
        if (navigation && navigation.loadEventEnd && navigation.navigationStart) {
            loadTime = navigation.loadEventEnd - navigation.navigationStart;
        } else {
            loadTime = performance.now();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
        let memoryUsage = 0;
        if (performance.memory) {
            memoryUsage = performance.memory.usedJSHeapSize / 1024 / 1024;
        }
        
        const endTime = performance.now();
        const testDuration = endTime - startTime;
        
        // –û—á–µ–Ω—å –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        const loadTimeOk = loadTime < 30000 || loadTime === 0; // 30 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 15
        const testDurationOk = testDuration < 10000; // 10 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 5
        const memoryOk = memoryUsage < 1000 || memoryUsage === 0; // 1GB –≤–º–µ—Å—Ç–æ 500MB
        
        const success = testDurationOk && loadTimeOk && memoryOk;
        
        logComprehensiveTest('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', success, 
            `–ó–∞–≥—Ä—É–∑–∫–∞: ${loadTime.toFixed(2)}ms, –¢–µ—Å—Ç: ${testDuration.toFixed(2)}ms, –ü–∞–º—è—Ç—å: ${memoryUsage.toFixed(2)}MB`, 'performance');
        return success;
    } catch (error) {
        logComprehensiveTest('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', false, `–û—à–∏–±–∫–∞: ${error.message}`, 'performance');
        return false;
    }
}

// === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
async function runComprehensiveTests() {
    console.log('üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–´–• –¢–ï–°–¢–û–í –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø');
    console.log('='.repeat(100));
    console.log('üìç URL:', window.location.href);
    console.log('üìç User Agent:', navigator.userAgent);
    console.log('üìç –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞:', window.innerWidth + 'x' + window.innerHeight);
    console.log('üìç –í—Ä–µ–º—è:', new Date().toLocaleString('ru-RU'));
    console.log('='.repeat(100));
    console.log('');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (window.app && window.app.showPage) {
        window.app.showPage('testing');
        console.log('üì± –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    comprehensiveTestResults = [];
    comprehensivePassedTests = 0;
    comprehensiveFailedTests = 0;
    currentTest = 0;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showComprehensiveTestResults('üîÑ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...', 'info');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    const progressElement = document.getElementById('testProgress');
    if (progressElement) {
        progressElement.style.display = 'block';
        const progressBar = progressElement.querySelector('.progress-bar');
        if (progressBar) {
            progressBar.style.width = '0%';
        }
    }
    
    createComprehensiveTestContainer();
    updateComprehensiveTestResults();
    
    const tests = [
        // API —Ç–µ—Å—Ç—ã
        { name: 'API –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π', func: testAPIComprehensive, category: 'api' },
        
        // Frontend —Ç–µ—Å—Ç—ã
        { name: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞', func: testFrontendInitialization, category: 'frontend' },
        { name: 'DOM —ç–ª–µ–º–µ–Ω—Ç—ã', func: testFrontendDOM, category: 'frontend' },
        
        // Mobile —Ç–µ—Å—Ç—ã
        { name: '–ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å', func: testMobileResponsive, category: 'mobile' },
        
        // Security —Ç–µ—Å—Ç—ã
        { name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', func: testSecurity, category: 'security' },
        
        // Performance —Ç–µ—Å—Ç—ã
        { name: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', func: testPerformance, category: 'performance' }
    ];
    
    for (let i = 0; i < tests.length; i++) {
        const test = tests[i];
        try {
            console.log(`\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: ${test.name}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            const progressElement = document.getElementById('testProgress');
            if (progressElement) {
                const progressBar = progressElement.querySelector('.progress-bar');
                if (progressBar) {
                    const progress = Math.round(((i + 1) / tests.length) * 100);
                    progressBar.style.width = `${progress}%`;
                    progressBar.setAttribute('aria-valuenow', progress);
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            showComprehensiveTestResults(`üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ ${i + 1}/${tests.length}: ${test.name}`, 'info');
            
            await test.func();
            currentTest++;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${test.name}:`, error);
            logComprehensiveTest(test.name, false, `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`, test.category);
            currentTest++;
        }
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüèÅ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–´–• –¢–ï–°–¢–û–í');
    console.log('='.repeat(100));
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${comprehensivePassedTests}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${comprehensiveFailedTests}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((comprehensivePassedTests / (comprehensivePassedTests + comprehensiveFailedTests)) * 100)}%`);
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${((Date.now() - performance.now()) / 1000).toFixed(2)} —Å–µ–∫—É–Ω–¥`);
    console.log('='.repeat(100));
    
    if (comprehensiveFailedTests > 0) {
        console.log('‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨:');
        comprehensiveTestResults.filter(r => !r.success).forEach(result => {
            console.log(`   ‚ùå ${result.name}: ${result.details}`);
        });
    } else {
        console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const statusElement = document.getElementById('testStatus');
    const progressElement = document.getElementById('testProgress');
    if (statusElement) statusElement.style.display = 'none';
    if (progressElement) progressElement.style.display = 'none';
    
    return {
        passed: comprehensivePassedTests,
        failed: comprehensiveFailedTests,
        successRate: Math.round((comprehensivePassedTests / (comprehensivePassedTests + comprehensiveFailedTests)) * 100),
        results: comprehensiveTestResults
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function copyComprehensiveResults() {
    let text = 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n';
    text += `‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${comprehensivePassedTests}\n`;
    text += `‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${comprehensiveFailedTests}\n`;
    text += `üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((comprehensivePassedTests / (comprehensivePassedTests + comprehensiveFailedTests)) * 100)}%\n`;
    text += `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n`;
    
    text += '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:\n';
    comprehensiveTestResults.forEach(result => {
        const status = result.success ? '‚úÖ' : '‚ùå';
        text += `${status} ${result.name} (${result.category})\n`;
        text += `   ${result.details}\n`;
        text += `   ${result.timestamp}\n\n`;
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É clipboard API
    if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(text).then(() => {
            console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
            showAlert('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        }).catch(err => {
            fallbackCopyTextToClipboard(text);
        });
    } else {
        fallbackCopyTextToClipboard(text);
    }
}

// Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
function fallbackCopyTextToClipboard(text) {
    const textArea = document.createElement("textarea");
    textArea.value = text;
    textArea.style.top = "0";
    textArea.style.left = "0";
    textArea.style.position = "fixed";
    textArea.style.opacity = "0";
    
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
        const successful = document.execCommand('copy');
        if (successful) {
            console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
            showAlert('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        } else {
            throw new Error('Copy command failed');
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        showAlert('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª—å.', 'warning');
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:');
        console.log(text);
    }
    
    document.body.removeChild(textArea);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function hideComprehensiveResults() {
    const container = document.getElementById('comprehensiveTestResults');
    if (container) {
        container.innerHTML = '';
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∫—Ä—ã—Ç—ã');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showAlert(message, type) {
    if (window.app && window.app.showAlert) {
        window.app.showAlert(message, type);
    } else {
        // Fallback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
        alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        document.body.appendChild(alertDiv);
        
        setTimeout(() => {
            if (alertDiv.parentNode) {
                alertDiv.parentNode.removeChild(alertDiv);
            }
        }, 5000);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.runComprehensiveTests = runComprehensiveTests;
window.copyComprehensiveResults = copyComprehensiveResults;
window.hideComprehensiveResults = hideComprehensiveResults;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üì± –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    console.log('üìç –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: runComprehensiveTests()');
    console.log('üìç –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: copyComprehensiveResults()');
});
