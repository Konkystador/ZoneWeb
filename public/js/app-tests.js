// –¢–µ—Å—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–û–∫–æ–Ω–Ω—ã–µ –ú–∞—Å—Ç–µ—Ä–∞"
// –ó–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ø—Ä—è–º–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

let testResults = [];
let passedTests = 0;
let failedTests = 0;

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
function logTest(testName, success, details = '') {
    const timestamp = new Date().toLocaleTimeString('ru-RU');
    const result = {
        name: testName,
        success: success,
        details: details,
        timestamp: timestamp
    };
    
    testResults.push(result);
    
    if (success) {
        passedTests++;
        console.log(`‚úÖ ${testName}: ${details}`);
    } else {
        failedTests++;
        console.log(`‚ùå ${testName}: ${details}`);
    }
}

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function testAppInitialization() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π app
        const app = window.app;
        console.log('üìç window.app:', app ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
        
        if (app) {
            console.log('üìç –¢–∏–ø app:', typeof app);
            console.log('üìç –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä app:', app.constructor.name);
            console.log('üìç –°–≤–æ–π—Å—Ç–≤–∞ app:', Object.keys(app));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º WindowRepairApp
        const WindowRepairApp = window.WindowRepairApp;
        console.log('üìç WindowRepairApp:', WindowRepairApp ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        const hasLogin = app && typeof app.login === 'function';
        const hasLogout = app && typeof app.logout === 'function';
        const hasShowOrderCards = app && typeof app.showOrderCards === 'function';
        const hasViewOrderCard = app && typeof app.viewOrderCard === 'function';
        
        console.log('üìç –ú–µ—Ç–æ–¥—ã app:');
        console.log('   - login:', hasLogin ? '–¥–∞' : '–Ω–µ—Ç');
        console.log('   - logout:', hasLogout ? '–¥–∞' : '–Ω–µ—Ç');
        console.log('   - showOrderCards:', hasShowOrderCards ? '–¥–∞' : '–Ω–µ—Ç');
        console.log('   - viewOrderCard:', hasViewOrderCard ? '–¥–∞' : '–Ω–µ—Ç');
        
        const success = !!(app && (hasLogin || hasShowOrderCards));
        logTest('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', success, 
            `app: ${app ? '–¥–∞' : '–Ω–µ—Ç'}, –º–µ—Ç–æ–¥—ã: ${hasLogin ? 'login' : ''} ${hasShowOrderCards ? 'showOrderCards' : ''}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        logTest('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function testDOMElements() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');
        
        const elements = [
            { id: 'mainApp', name: '–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' },
            { id: 'loginScreen', name: '–≠–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞' },
            { id: 'newOrderModal', name: '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞' },
            { id: 'orderDetailsModal', name: '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞' },
            { id: 'userProfileModal', name: '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
            { id: 'orderForm', name: '–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞' }
        ];
        
        let foundElements = 0;
        const foundList = [];
        
        elements.forEach(element => {
            const el = document.getElementById(element.id);
            if (el) {
                foundElements++;
                foundList.push(element.name);
                console.log(`‚úÖ ${element.name}: –Ω–∞–π–¥–µ–Ω`);
            } else {
                console.log(`‚ùå ${element.name}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });
        
        const success = foundElements >= 2; // –ú–∏–Ω–∏–º—É–º 2 —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã
        logTest('DOM —ç–ª–µ–º–µ–Ω—Ç—ã', success, 
            `–ù–∞–π–¥–µ–Ω–æ: ${foundElements}/${elements.length}, —ç–ª–µ–º–µ–Ω—Ç—ã: ${foundList.join(', ')}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', error);
        logTest('DOM —ç–ª–µ–º–µ–Ω—Ç—ã', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –∫–ª–∞—Å—Å–æ–≤
function testCSSClasses() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –∫–ª–∞—Å—Å–æ–≤...');
        
        const requiredClasses = [
            'modal-3d',
            'order-card-3d',
            'form-control-3d',
            'nav-3d',
            'alert-3d'
        ];
        
        let foundClasses = 0;
        const foundList = [];
        
        requiredClasses.forEach(className => {
            const elements = document.querySelectorAll(`.${className}`);
            if (elements.length > 0) {
                foundClasses++;
                foundList.push(className);
                console.log(`‚úÖ ${className}: –Ω–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
            } else {
                console.log(`‚ùå ${className}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            }
        });
        
        const success = foundClasses >= 2; // –ú–∏–Ω–∏–º—É–º 2 –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã
        logTest('CSS –∫–ª–∞—Å—Å—ã', success, 
            `–ù–∞–π–¥–µ–Ω–æ: ${foundClasses}/${requiredClasses.length}, –∫–ª–∞—Å—Å—ã: ${foundList.join(', ')}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CSS –∫–ª–∞—Å—Å–æ–≤:', error);
        logTest('CSS –∫–ª–∞—Å—Å—ã', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
function testGlobalFunctions() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...');
        
        const requiredFunctions = [
            'showOrderCards',
            'viewOrderCard',
            'showAlert',
            'showOrderDetailsModal'
        ];
        
        let foundFunctions = 0;
        const foundList = [];
        
        requiredFunctions.forEach(funcName => {
            if (typeof window[funcName] === 'function') {
                foundFunctions++;
                foundList.push(funcName);
                console.log(`‚úÖ ${funcName}: –Ω–∞–π–¥–µ–Ω–∞`);
            } else {
                console.log(`‚ùå ${funcName}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            }
        });
        
        const success = foundFunctions >= 2; // –ú–∏–Ω–∏–º—É–º 2 —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã
        logTest('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏', success, 
            `–ù–∞–π–¥–µ–Ω–æ: ${foundFunctions}/${requiredFunctions.length}, —Ñ—É–Ω–∫—Ü–∏–∏: ${foundList.join(', ')}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:', error);
        logTest('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function testModals() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω...');
        
        const modals = [
            { id: 'newOrderModal', name: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞' },
            { id: 'orderDetailsModal', name: '–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞' },
            { id: 'userProfileModal', name: '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }
        ];
        
        let foundModals = 0;
        const foundList = [];
        
        modals.forEach(modal => {
            const el = document.getElementById(modal.id);
            if (el) {
                foundModals++;
                foundList.push(modal.name);
                console.log(`‚úÖ ${modal.name}: –Ω–∞–π–¥–µ–Ω–æ`);
            } else {
                console.log(`‚ùå ${modal.name}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            }
        });
        
        const success = foundModals >= 1; // –ú–∏–Ω–∏–º—É–º 1 –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–æ
        logTest('–ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞', success, 
            `–ù–∞–π–¥–µ–Ω–æ: ${foundModals}/${modals.length}, –æ–∫–Ω–∞: ${foundList.join(', ')}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω:', error);
        logTest('–ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º
function testForms() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º...');
        
        const forms = document.querySelectorAll('form');
        console.log('üìç –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º:', forms.length);
        
        const orderForm = document.getElementById('orderForm');
        const hasOrderForm = !!orderForm;
        
        console.log('üìç –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞:', hasOrderForm ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        
        if (orderForm) {
            const inputs = orderForm.querySelectorAll('input, select, textarea');
            console.log('üìç –ü–æ–ª—è —Ñ–æ—Ä–º—ã:', inputs.length);
        }
        
        const success = forms.length >= 1;
        logTest('–§–æ—Ä–º—ã', success, 
            `–ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º: ${forms.length}, —Ñ–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞: ${hasOrderForm ? '–¥–∞' : '–Ω–µ—Ç'}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º:', error);
        logTest('–§–æ—Ä–º—ã', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ API
async function testAPI() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API...');
        
        const baseUrl = window.location.origin;
        const apiTests = [
            { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', url: '/api/auth/check' },
            { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', url: '/api/users' },
            { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤', url: '/api/orders' },
            { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤', url: '/api/services' }
        ];
        
        let successfulTests = 0;
        const results = [];
        
        for (const test of apiTests) {
            try {
                console.log(`üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º ${test.name}...`);
                const response = await fetch(`${baseUrl}${test.url}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    console.log(`‚úÖ ${test.name}: ${response.status} ${response.statusText}`);
                    successfulTests++;
                    results.push(`${test.name}: OK`);
                } else {
                    console.log(`‚ùå ${test.name}: ${response.status} ${response.statusText}`);
                    results.push(`${test.name}: ${response.status}`);
                }
            } catch (error) {
                console.log(`‚ùå ${test.name}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - ${error.message}`);
                results.push(`${test.name}: –û—à–∏–±–∫–∞`);
            }
        }
        
        const success = successfulTests >= 2; // –ú–∏–Ω–∏–º—É–º 2 API –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
        logTest('API', success, 
            `–£—Å–ø–µ—à–Ω—ã—Ö: ${successfulTests}/${apiTests.length}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${results.join(', ')}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API:', error);
        logTest('API', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function testPerformance() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
        
        const startTime = performance.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const navigation = performance.getEntriesByType('navigation')[0];
        let loadTime = 0;
        
        if (navigation) {
            loadTime = navigation.loadEventEnd - navigation.navigationStart;
            console.log('üìç –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', loadTime, 'ms');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        let memoryUsage = 0;
        if (performance.memory) {
            memoryUsage = performance.memory.usedJSHeapSize / 1024 / 1024;
            console.log('üìç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:', memoryUsage.toFixed(2), 'MB');
        }
        
        const endTime = performance.now();
        const testDuration = endTime - startTime;
        
        const success = testDuration < 1000 && loadTime < 10000; // –¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ
        logTest('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', success, 
            `–í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ${testDuration.toFixed(2)}ms, –∑–∞–≥—Ä—É–∑–∫–∞: ${loadTime.toFixed(2)}ms, –ø–∞–º—è—Ç—å: ${memoryUsage.toFixed(2)}MB`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
        logTest('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ 3D —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
function test3DEffects() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ 3D —ç—Ñ—Ñ–µ–∫—Ç–æ–≤...');
        
        const requiredClasses = [
            'modal-3d',
            'order-card-3d',
            'form-control-3d',
            'nav-3d',
            'alert-3d'
        ];
        
        let foundClasses = 0;
        const foundList = [];
        
        requiredClasses.forEach(className => {
            const elements = document.querySelectorAll(`.${className}`);
            if (elements.length > 0) {
                foundClasses++;
                foundList.push(className);
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        const root = document.documentElement;
        const computedStyle = getComputedStyle(root);
        const cssVars = [
            '--shadow-3d',
            '--border-3d',
            '--gradient-3d'
        ];
        
        let foundVars = 0;
        cssVars.forEach(varName => {
            if (computedStyle.getPropertyValue(varName)) {
                foundVars++;
            }
        });
        
        const success = foundClasses >= 2 || foundVars >= 1;
        logTest('3D —ç—Ñ—Ñ–µ–∫—Ç—ã', success, 
            `–ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Å–æ–≤: ${foundClasses}/${requiredClasses.length}, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${foundVars}/${cssVars.length}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ 3D —ç—Ñ—Ñ–µ–∫—Ç–æ–≤:', error);
        logTest('3D —ç—Ñ—Ñ–µ–∫—Ç—ã', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
function testResponsiveness() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
        
        const mediaQueries = [
            '(max-width: 768px)',
            '(max-width: 992px)',
            '(min-width: 1200px)'
        ];
        
        let foundQueries = 0;
        mediaQueries.forEach(query => {
            if (window.matchMedia(query).matches) {
                foundQueries++;
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Bootstrap –∫–ª–∞—Å—Å–æ–≤
        const bootstrapClasses = [
            'container',
            'row',
            'col-',
            'd-none',
            'd-md-block'
        ];
        
        let foundBootstrap = 0;
        bootstrapClasses.forEach(className => {
            if (className.includes('-')) {
                const elements = document.querySelectorAll(`[class*="${className}"]`);
                if (elements.length > 0) {
                    foundBootstrap++;
                }
            } else {
                const elements = document.querySelectorAll(`.${className}`);
                if (elements.length > 0) {
                    foundBootstrap++;
                }
            }
        });
        
        const success = foundBootstrap >= 2;
        logTest('–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å', success, 
            `Bootstrap –∫–ª–∞—Å—Å–æ–≤: ${foundBootstrap}/${bootstrapClasses.length}, –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å—ã: ${foundQueries}/${mediaQueries.length}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
        logTest('–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å', false, error.message);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    console.log('üìç URL:', window.location.href);
    console.log('üìç –í—Ä–µ–º—è:', new Date().toLocaleString('ru-RU'));
    console.log('');
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    testResults = [];
    passedTests = 0;
    failedTests = 0;
    
    const tests = [
        testAppInitialization,
        testDOMElements,
        testCSSClasses,
        testGlobalFunctions,
        testModals,
        testForms,
        testAPI,
        testPerformance,
        test3DEffects,
        testResponsiveness
    ];
    
    for (const test of tests) {
        try {
            await test();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
            logTest('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞', false, error.message);
        }
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passedTests / (passedTests + failedTests)) * 100)}%`);
    
    if (failedTests > 0) {
        console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
    } else {
        console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    }
    
    console.log('');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:');
    testResults.forEach(result => {
        const status = result.success ? '‚úÖ' : '‚ùå';
        console.log(`${result.name}`);
        console.log(`${result.details}`);
        console.log(`${result.timestamp}`);
        console.log('');
    });
    
    return {
        passed: passedTests,
        failed: failedTests,
        successRate: Math.round((passedTests / (passedTests + failedTests)) * 100),
        results: testResults
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function copyTestResults() {
    let text = 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n';
    text += `‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}\n`;
    text += `‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}\n`;
    text += `üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passedTests / (passedTests + failedTests)) * 100)}%\n\n`;
    
    text += '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:\n';
    testResults.forEach(result => {
        const status = result.success ? '‚úÖ' : '‚ùå';
        text += `${result.name}\n${result.details}\n${result.timestamp}\n\n`;
    });
    
    navigator.clipboard.writeText(text).then(() => {
        console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        if (window.app && window.app.showAlert) {
            window.app.showAlert('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        }
    }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
    });
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.runAllTests = runAllTests;
window.copyTestResults = copyTestResults;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üì± –¢–µ—Å—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    console.log('üìç –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: runAllTests()');
    console.log('üìç –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: copyTestResults()');
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
setTimeout(() => {
    console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
    console.log('üìç –î–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: clearTimeout(window.autoTestTimeout)');
    window.autoTestTimeout = setTimeout(() => {
        console.log('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...');
        runAllTests();
    }, 3000);
}, 1000);
