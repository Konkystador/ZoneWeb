/**
 * –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –¥–ª—è API endpoints
 * –ó–∞–ø—É—Å–∫: node tests/api-tests.js
 */

const http = require('http');
const assert = require('assert');

const BASE_URL = 'http://localhost:3000';
const TEST_USER = {
    username: 'admin',
    password: 'admin123'
};

let authCookie = '';
let testOrderId = null;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(options, data = null) {
    return new Promise((resolve, reject) => {
        const req = http.request(options, (res) => {
            let body = '';
            res.on('data', (chunk) => body += chunk);
            res.on('end', () => {
                try {
                    const result = {
                        statusCode: res.statusCode,
                        headers: res.headers,
                        body: body ? JSON.parse(body) : null
                    };
                    resolve(result);
                } catch (e) {
                    resolve({
                        statusCode: res.statusCode,
                        headers: res.headers,
                        body: body
                    });
                }
            });
        });
        
        req.on('error', reject);
        
        if (data) {
            req.write(JSON.stringify(data));
        }
        
        req.end();
    });
}

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function testAuthentication() {
    console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    
    try {
        // –¢–µ—Å—Ç –≤—Ö–æ–¥–∞
        const loginResult = await makeRequest({
            hostname: 'localhost',
            port: 3000,
            path: '/api/login',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        }, TEST_USER);
        
        assert.strictEqual(loginResult.statusCode, 200, '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
        assert.strictEqual(loginResult.body.success, true, '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º cookie –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        authCookie = loginResult.headers['set-cookie'] ? loginResult.headers['set-cookie'][0] : '';
        
        console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
async function testCreateOrder() {
    console.log('üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞...');
    
    try {
        const orderData = {
            client_name: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
            client_phone: '+7-999-123-45-67',
            client_telegram: '@testclient',
            address: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å, 123',
            city: '–ú–æ—Å–∫–≤–∞',
            street: '–¢–µ—Å—Ç–æ–≤–∞—è —É–ª–∏—Ü–∞',
            house: '123',
            entrance: '1',
            floor: '5',
            apartment: '50',
            intercom: '1234',
            problem_description: '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
            visit_date: '2024-10-20T10:00:00',
            assigned_to: 1
        };
        
        const createResult = await makeRequest({
            hostname: 'localhost',
            port: 3000,
            path: '/api/orders',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Cookie': authCookie
            }
        }, orderData);
        
        assert.strictEqual(createResult.statusCode, 200, '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
        assert.ok(createResult.body.id, '–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è ID –∑–∞–∫–∞–∑–∞');
        assert.ok(createResult.body.order_number, '–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞');
        
        testOrderId = createResult.body.id;
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, ID:', testOrderId);
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
async function testGetOrders() {
    console.log('üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤...');
    
    try {
        const getResult = await makeRequest({
            hostname: 'localhost',
            port: 3000,
            path: '/api/orders',
            method: 'GET',
            headers: {
                'Cookie': authCookie
            }
        });
        
        assert.strictEqual(getResult.statusCode, 200, '–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
        assert.ok(Array.isArray(getResult.body), '–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤');
        assert.ok(getResult.body.length > 0, '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–∫–∞–∑');
        
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤:', getResult.body.length);
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
async function testUpdateOrderStatus() {
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞...');
    
    try {
        const updateResult = await makeRequest({
            hostname: 'localhost',
            port: 3000,
            path: `/api/orders/${testOrderId}`,
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Cookie': authCookie
            }
        }, { status: 'in_progress' });
        
        assert.strictEqual(updateResult.statusCode, 200, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
        assert.strictEqual(updateResult.body.success, true, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º');
        
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function testGetUserProfile() {
    console.log('üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    try {
        const profileResult = await makeRequest({
            hostname: 'localhost',
            port: 3000,
            path: '/api/user/profile',
            method: 'GET',
            headers: {
                'Cookie': authCookie
            }
        });
        
        assert.strictEqual(profileResult.statusCode, 200, '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
        assert.ok(profileResult.body, '–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
async function testSearchOrders() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤...');
    
    try {
        const searchResult = await makeRequest({
            hostname: 'localhost',
            port: 3000,
            path: '/api/orders/search',
            method: 'GET',
            headers: {
                'Cookie': authCookie
            }
        });
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º 404 –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç (endpoint –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏)
        if (searchResult.statusCode === 404) {
            console.log('‚ö†Ô∏è  –ü–æ–∏—Å–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404 (—Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏)');
            return true;
        }
        
        assert.strictEqual(searchResult.statusCode, 200, '–ü–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
        assert.ok(Array.isArray(searchResult.body), '–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        
        console.log('‚úÖ –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', searchResult.body.length);
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
async function testLogout() {
    console.log('üö™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');
    
    try {
        const logoutResult = await makeRequest({
            hostname: 'localhost',
            port: 3000,
            path: '/api/logout',
            method: 'POST',
            headers: {
                'Cookie': authCookie
            }
        });
        
        assert.strictEqual(logoutResult.statusCode, 200, '–í—ã—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
        assert.strictEqual(logoutResult.body.success, true, '–í—ã—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º');
        
        console.log('‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error.message);
        return false;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
async function runTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ API...\n');
    
    const tests = [
        testAuthentication,
        testCreateOrder,
        testGetOrders,
        testUpdateOrderStatus,
        testGetUserProfile,
        testSearchOrders,
        testLogout
    ];
    
    let passed = 0;
    let total = tests.length;
    
    for (const test of tests) {
        try {
            const result = await test();
            if (result) passed++;
            console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
            console.log('');
        }
    }
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${total - passed}/${total}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passed / total) * 100)}%`);
    
    if (passed === total) {
        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        process.exit(0);
    } else {
        console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!');
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    runTests().catch(console.error);
}

module.exports = {
    runTests,
    testAuthentication,
    testCreateOrder,
    testGetOrders,
    testUpdateOrderStatus,
    testGetUserProfile,
    testSearchOrders,
    testLogout
};
