#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 * –ó–∞–ø—É—Å–∫: node tests/run-all-tests.js
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–û–∫–æ–Ω–Ω—ã–µ –ú–∞—Å—Ç–µ—Ä–∞"\n');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
async function checkServer() {
    return new Promise((resolve) => {
        const http = require('http');
        const req = http.request({
            hostname: 'localhost',
            port: 3000,
            path: '/api/auth/check',
            method: 'GET'
        }, (res) => {
            resolve(res.statusCode === 200 || res.statusCode === 401);
        });
        
        req.on('error', () => resolve(false));
        req.setTimeout(2000, () => {
            req.destroy();
            resolve(false);
        });
        
        req.end();
    });
}

// –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤
async function runAPITests() {
    log('\nüì° –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤...', 'blue');
    
    return new Promise((resolve) => {
        const apiTest = spawn('node', ['tests/api-tests.js'], {
            stdio: 'inherit',
            cwd: process.cwd()
        });
        
        apiTest.on('close', (code) => {
            if (code === 0) {
                log('‚úÖ API —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ', 'green');
            } else {
                log('‚ùå API —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å', 'red');
            }
            resolve(code === 0);
        });
        
        apiTest.on('error', (error) => {
            log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Ç–µ—Å—Ç–æ–≤: ${error.message}`, 'red');
            resolve(false);
        });
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
function checkFileSizes() {
    log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤...', 'blue');
    
    const files = [
        'public/js/app-simple.js',
        'public/css/style.css',
        'server.js',
        'public/index.html'
    ];
    
    let totalSize = 0;
    let results = [];
    
    for (const file of files) {
        try {
            const stats = fs.statSync(file);
            const sizeKB = Math.round(stats.size / 1024);
            totalSize += sizeKB;
            results.push({ file, size: sizeKB });
            log(`  ${file}: ${sizeKB} KB`, 'cyan');
        } catch (error) {
            log(`  ‚ùå ${file}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'red');
        }
    }
    
    log(`\nüìà –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${totalSize} KB`, 'magenta');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    const limits = {
        'app-simple.js': 500, // 500 KB
        'style.css': 200,     // 200 KB
        'server.js': 300,     // 300 KB
        'index.html': 100     // 100 KB
    };
    
    let warnings = 0;
    for (const result of results) {
        const fileName = path.basename(result.file);
        const limit = limits[fileName];
        if (limit && result.size > limit) {
            log(`  ‚ö†Ô∏è  ${fileName} –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä (${result.size} KB > ${limit} KB)`, 'yellow');
            warnings++;
        }
    }
    
    if (warnings === 0) {
        log('‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤', 'green');
    }
    
    return { totalSize, warnings };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function checkPerformance() {
    log('\n‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...', 'blue');
    
    const startTime = process.hrtime.bigint();
    
    // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    let operations = 0;
    for (let i = 0; i < 1000000; i++) {
        operations++;
    }
    
    const endTime = process.hrtime.bigint();
    const duration = Number(endTime - startTime) / 1000000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    log(`  –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${operations.toLocaleString()} –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ ${duration.toFixed(2)}ms`, 'cyan');
    
    if (duration < 100) {
        log('‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è', 'green');
    } else if (duration < 500) {
        log('‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–∞—è', 'green');
    } else {
        log('‚ö†Ô∏è  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–∞', 'yellow');
    }
    
    return duration;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function checkSecurity() {
    log('\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...', 'blue');
    
    const securityChecks = [
        {
            name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ helmet middleware',
            check: () => {
                const serverContent = fs.readFileSync('server.js', 'utf8');
                return serverContent.includes('helmet') && serverContent.includes('cors');
            }
        },
        {
            name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
            check: () => {
                const serverContent = fs.readFileSync('server.js', 'utf8');
                return serverContent.includes('requireAuth') && serverContent.includes('req.body');
            }
        },
        {
            name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            check: () => {
                const serverContent = fs.readFileSync('server.js', 'utf8');
                return serverContent.includes('trust proxy');
            }
        }
    ];
    
    let passed = 0;
    for (const check of securityChecks) {
        try {
            if (check.check()) {
                log(`  ‚úÖ ${check.name}`, 'green');
                passed++;
            } else {
                log(`  ‚ùå ${check.name}`, 'red');
            }
        } catch (error) {
            log(`  ‚ùå ${check.name}: ${error.message}`, 'red');
        }
    }
    
    log(`\nüìä –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: ${passed}/${securityChecks.length} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ`, 'magenta');
    return passed === securityChecks.length;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runAllTests() {
    const startTime = Date.now();
    
    log('üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...', 'bright');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
    log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...', 'blue');
    const serverRunning = await checkServer();
    if (!serverRunning) {
        log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm start', 'red');
        log('üí° –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node server.js', 'yellow');
        process.exit(1);
    }
    log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω', 'green');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º API —Ç–µ—Å—Ç—ã
    const apiTestsPassed = await runAPITests();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    const fileStats = checkFileSizes();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const performance = checkPerformance();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    const securityPassed = checkSecurity();
    
    // –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const endTime = Date.now();
    const totalTime = (endTime - startTime) / 1000;
    
    log('\n' + '='.repeat(60), 'bright');
    log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', 'bright');
    log('='.repeat(60), 'bright');
    
    log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTime.toFixed(2)} —Å–µ–∫—É–Ω–¥`, 'cyan');
    log(`üì° API —Ç–µ—Å—Ç—ã: ${apiTestsPassed ? '‚úÖ –ü—Ä–æ–π–¥–µ–Ω—ã' : '‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω—ã'}`, apiTestsPassed ? 'green' : 'red');
    log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤: ${fileStats.totalSize} KB (${fileStats.warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π)`, fileStats.warnings === 0 ? 'green' : 'yellow');
    log(`‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${performance < 100 ? '‚úÖ –û—Ç–ª–∏—á–Ω–∞—è' : performance < 500 ? '‚úÖ –•–æ—Ä–æ—à–∞—è' : '‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è'}`, performance < 500 ? 'green' : 'yellow');
    log(`üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: ${securityPassed ? '‚úÖ –ü—Ä–æ–π–¥–µ–Ω–∞' : '‚ùå –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}`, securityPassed ? 'green' : 'red');
    
    const allPassed = apiTestsPassed && securityPassed && fileStats.warnings === 0;
    
    if (allPassed) {
        log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!', 'green');
        log('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!', 'green');
    } else {
        log('\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨', 'yellow');
        log('üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã', 'yellow');
    }
    
    log('\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ: tests/frontend-tests.html', 'blue');
    
    process.exit(allPassed ? 0 : 1);
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    runAllTests().catch((error) => {
        log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
        process.exit(1);
    });
}

module.exports = { runAllTests };
