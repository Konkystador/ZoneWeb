// –¢–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let testResults = [];
let currentTest = 0;
let passedTests = 0;
let failedTests = 0;

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
function logTest(testName, success, details = '') {
    const timestamp = new Date().toLocaleTimeString('ru-RU');
    const result = {
        name: testName,
        success: success,
        details: details,
        timestamp: timestamp
    };
    
    testResults.push(result);
    
    if (success) {
        passedTests++;
    } else {
        failedTests++;
    }
    
    updateTestDisplay();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function updateTestDisplay() {
    const resultsDiv = document.getElementById('testResults');
    const statsDiv = document.getElementById('testStats');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('passedCount').textContent = passedTests;
    document.getElementById('failedCount').textContent = failedTests;
    document.getElementById('successRate').textContent = 
        Math.round((passedTests / (passedTests + failedTests)) * 100) + '%';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    statsDiv.style.display = 'block';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    let html = '<h5>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h5>';
    
    testResults.forEach(result => {
        const statusClass = result.success ? 'success' : 'error';
        const statusIcon = result.success ? '‚úÖ' : '‚ùå';
        
        html += `
            <div class="test-item ${statusClass}">
                <strong>${statusIcon} ${result.name}</strong>
                <br>
                <small class="text-muted">${result.details}</small>
                <br>
                <small class="text-muted">${result.timestamp}</small>
            </div>
        `;
    });
    
    resultsDiv.innerHTML = html;
}

// –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function clearResults() {
    testResults = [];
    passedTests = 0;
    failedTests = 0;
    currentTest = 0;
    
    document.getElementById('testResults').innerHTML = `
        <h5>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h5>
        <p class="text-muted">–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</p>
    `;
    
    document.getElementById('testStats').style.display = 'none';
    document.getElementById('iframeContainer').style.display = 'none';
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function copyResults() {
    let text = 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n\n';
    text += `‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}\n`;
    text += `‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}\n`;
    text += `üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passedTests / (passedTests + failedTests)) * 100)}%\n\n`;
    
    text += '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:\n';
    testResults.forEach(result => {
        const status = result.success ? '‚úÖ' : '‚ùå';
        text += `${result.name}\n${result.details}\n${result.timestamp}\n\n`;
    });
    
    navigator.clipboard.writeText(text).then(() => {
        showAlert('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
    }).catch(err => {
        showAlert('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ' + err.message, 'error');
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function exportResults() {
    const data = {
        timestamp: new Date().toISOString(),
        summary: {
            passed: passedTests,
            failed: failedTests,
            successRate: Math.round((passedTests / (passedTests + failedTests)) * 100)
        },
        results: testResults
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `main-app-tests-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    showAlert('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showAlert(message, type = 'info') {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.querySelector('.test-controls').insertBefore(alertDiv, document.getElementById('testStats'));
    
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, 5000);
}

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function testMainPageLoading() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        
        const iframe = document.getElementById('mainAppFrame');
        const iframeContainer = document.getElementById('iframeContainer');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º iframe
        iframeContainer.style.display = 'block';
        
        return new Promise((resolve) => {
            iframe.onload = () => {
                console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ iframe');
                
                try {
                    const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
                    const mainApp = iframeDoc.getElementById('mainApp');
                    const loginScreen = iframeDoc.getElementById('loginScreen');
                    
                    console.log('üìç mainApp –≤ iframe:', mainApp ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
                    console.log('üìç loginScreen –≤ iframe:', loginScreen ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
                    
                    const success = !!(mainApp || loginScreen);
                    logTest('–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã', success, 
                        `–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: ${success ? '–¥–∞' : '–Ω–µ—Ç'}`);
                    resolve(success);
                } catch (error) {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ iframe:', error.message);
                    logTest('–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã', false, 
                        `–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ iframe: ${error.message}`);
                    resolve(false);
                }
            };
            
            iframe.onerror = () => {
                console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
                logTest('–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã', false, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
                resolve(false);
            };
            
            // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
            setTimeout(() => {
                if (iframe.contentDocument && iframe.contentDocument.readyState === 'complete') {
                    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É');
                    resolve(true);
                } else {
                    console.log('‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
                    logTest('–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã', false, '–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏');
                    resolve(false);
                }
            }, 10000);
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        logTest('–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function testAppInitialization() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        const iframe = document.getElementById('mainAppFrame');
        const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ app-simple.js
        const scripts = Array.from(iframeDoc.scripts);
        const appScript = scripts.find(script => 
            script.src && script.src.includes('app-simple.js')
        );
        
        console.log('üìç –°–∫—Ä–∏–ø—Ç app-simple.js:', appScript ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
        
        if (appScript) {
            console.log('üìç URL —Å–∫—Ä–∏–ø—Ç–∞:', appScript.src);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é app
        const app = iframe.contentWindow.app;
        console.log('üìç window.app:', app ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
        
        if (app) {
            console.log('üìç –¢–∏–ø app:', typeof app);
            console.log('üìç –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä app:', app.constructor.name);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º WindowRepairApp
        const WindowRepairApp = iframe.contentWindow.WindowRepairApp;
        console.log('üìç WindowRepairApp:', WindowRepairApp ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
        
        const success = !!(app && (app.constructor.name === 'WindowRepairApp' || app.constructor.name === 'Object'));
        logTest('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', success, 
            `–°–∫—Ä–∏–ø—Ç: ${appScript ? '–¥–∞' : '–Ω–µ—Ç'}, app: ${app ? '–¥–∞' : '–Ω–µ—Ç'}, WindowRepairApp: ${WindowRepairApp ? '–¥–∞' : '–Ω–µ—Ç'}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        logTest('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
async function testDOMElements() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');
        
        const iframe = document.getElementById('mainAppFrame');
        const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
        
        const elements = [
            { id: 'mainApp', name: '–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' },
            { id: 'loginScreen', name: '–≠–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞' },
            { id: 'newOrderModal', name: '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞' },
            { id: 'orderDetailsModal', name: '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞' },
            { id: 'userProfileModal', name: '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
            { id: 'orderForm', name: '–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞' }
        ];
        
        let foundElements = 0;
        const foundList = [];
        
        elements.forEach(element => {
            const el = iframeDoc.getElementById(element.id);
            if (el) {
                foundElements++;
                foundList.push(element.name);
                console.log(`‚úÖ ${element.name}: –Ω–∞–π–¥–µ–Ω`);
            } else {
                console.log(`‚ùå ${element.name}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });
        
        const success = foundElements >= 2; // –ú–∏–Ω–∏–º—É–º 2 —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã
        logTest('DOM —ç–ª–µ–º–µ–Ω—Ç—ã', success, 
            `–ù–∞–π–¥–µ–Ω–æ: ${foundElements}/${elements.length}, —ç–ª–µ–º–µ–Ω—Ç—ã: ${foundList.join(', ')}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', error);
        logTest('DOM —ç–ª–µ–º–µ–Ω—Ç—ã', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –∫–ª–∞—Å—Å–æ–≤
async function testCSSClasses() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –∫–ª–∞—Å—Å–æ–≤...');
        
        const iframe = document.getElementById('mainAppFrame');
        const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
        
        const requiredClasses = [
            'modal-3d',
            'order-card-3d',
            'form-control-3d',
            'nav-3d',
            'alert-3d'
        ];
        
        let foundClasses = 0;
        const foundList = [];
        
        requiredClasses.forEach(className => {
            const elements = iframeDoc.querySelectorAll(`.${className}`);
            if (elements.length > 0) {
                foundClasses++;
                foundList.push(className);
                console.log(`‚úÖ ${className}: –Ω–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
            } else {
                console.log(`‚ùå ${className}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            }
        });
        
        const success = foundClasses >= 2; // –ú–∏–Ω–∏–º—É–º 2 –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã
        logTest('CSS –∫–ª–∞—Å—Å—ã', success, 
            `–ù–∞–π–¥–µ–Ω–æ: ${foundClasses}/${requiredClasses.length}, –∫–ª–∞—Å—Å—ã: ${foundList.join(', ')}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CSS –∫–ª–∞—Å—Å–æ–≤:', error);
        logTest('CSS –∫–ª–∞—Å—Å—ã', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
async function testGlobalFunctions() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...');
        
        const iframe = document.getElementById('mainAppFrame');
        const iframeWindow = iframe.contentWindow;
        
        const requiredFunctions = [
            'showOrderCards',
            'viewOrderCard',
            'showAlert',
            'showOrderDetailsModal'
        ];
        
        let foundFunctions = 0;
        const foundList = [];
        
        requiredFunctions.forEach(funcName => {
            if (typeof iframeWindow[funcName] === 'function') {
                foundFunctions++;
                foundList.push(funcName);
                console.log(`‚úÖ ${funcName}: –Ω–∞–π–¥–µ–Ω–∞`);
            } else {
                console.log(`‚ùå ${funcName}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            }
        });
        
        const success = foundFunctions >= 2; // –ú–∏–Ω–∏–º—É–º 2 —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã
        logTest('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏', success, 
            `–ù–∞–π–¥–µ–Ω–æ: ${foundFunctions}/${requiredFunctions.length}, —Ñ—É–Ω–∫—Ü–∏–∏: ${foundList.join(', ')}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:', error);
        logTest('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ API
async function testAPI() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API...');
        
        const baseUrl = 'http://188.120.240.71';
        const apiTests = [
            { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', url: '/api/auth/check' },
            { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', url: '/api/users' },
            { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤', url: '/api/orders' },
            { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤', url: '/api/services' }
        ];
        
        let successfulTests = 0;
        const results = [];
        
        for (const test of apiTests) {
            try {
                console.log(`üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º ${test.name}...`);
                const response = await fetch(`${baseUrl}${test.url}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    console.log(`‚úÖ ${test.name}: ${response.status} ${response.statusText}`);
                    successfulTests++;
                    results.push(`${test.name}: OK`);
                } else {
                    console.log(`‚ùå ${test.name}: ${response.status} ${response.statusText}`);
                    results.push(`${test.name}: ${response.status}`);
                }
            } catch (error) {
                console.log(`‚ùå ${test.name}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - ${error.message}`);
                results.push(`${test.name}: –û—à–∏–±–∫–∞`);
            }
        }
        
        const success = successfulTests >= 2; // –ú–∏–Ω–∏–º—É–º 2 API –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
        logTest('API', success, 
            `–£—Å–ø–µ—à–Ω—ã—Ö: ${successfulTests}/${apiTests.length}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${results.join(', ')}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API:', error);
        logTest('API', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async function testPerformance() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
        
        const startTime = performance.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const navigation = performance.getEntriesByType('navigation')[0];
        let loadTime = 0;
        
        if (navigation) {
            loadTime = navigation.loadEventEnd - navigation.navigationStart;
            console.log('üìç –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', loadTime, 'ms');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        let memoryUsage = 0;
        if (performance.memory) {
            memoryUsage = performance.memory.usedJSHeapSize / 1024 / 1024;
            console.log('üìç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:', memoryUsage.toFixed(2), 'MB');
        }
        
        const endTime = performance.now();
        const testDuration = endTime - startTime;
        
        const success = testDuration < 1000 && loadTime < 5000; // –¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ
        logTest('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', success, 
            `–í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ${testDuration.toFixed(2)}ms, –∑–∞–≥—Ä—É–∑–∫–∞: ${loadTime.toFixed(2)}ms, –ø–∞–º—è—Ç—å: ${memoryUsage.toFixed(2)}MB`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
        logTest('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', false, error.message);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runMainAppTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    clearResults();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    document.getElementById('loading').style.display = 'block';
    
    try {
        const tests = [
            testMainPageLoading,
            testAppInitialization,
            testDOMElements,
            testCSSClasses,
            testGlobalFunctions,
            testAPI,
            testPerformance
        ];
        
        for (const test of tests) {
            try {
                await test();
                currentTest++;
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
                logTest('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞', false, error.message);
            }
        }
        
        console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests} –ø—Ä–æ–π–¥–µ–Ω–æ, ${failedTests} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ`);
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        logTest('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', false, error.message);
    } finally {
        // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        document.getElementById('loading').style.display = 'none';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üì± –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    console.log('üìç URL:', window.location.href);
    console.log('üìç –í—Ä–µ–º—è:', new Date().toLocaleString('ru-RU'));
});
