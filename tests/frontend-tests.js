/**
 * –¢–µ—Å—Ç—ã –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–∑–∞–ø—É—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
 * –û—Ç–∫—Ä–æ–π—Ç–µ tests/frontend-tests.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
let testResults = [];
let currentTest = 0;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function logTest(testName, passed, message = '') {
    const result = {
        name: testName,
        passed: passed,
        message: message,
        timestamp: new Date().toISOString()
    };
    testResults.push(result);
    
    const status = passed ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${testName}: ${message}`);
    
    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`üîç –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∞ "${testName}":`);
    console.log(`   - –°—Ç–∞—Ç—É—Å: ${passed ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù'}`);
    console.log(`   - –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`);
    console.log(`   - –í—Ä–µ–º—è: ${new Date(result.timestamp).toLocaleTimeString('ru-RU')}`);
    console.log(`   - URL: ${window.location.href}`);
    console.log(`   - User Agent: ${navigator.userAgent}`);
    console.log(`   - –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: ${window.innerWidth}x${window.innerHeight}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    updateTestUI(result);
}

function updateTestUI(result) {
    const testContainer = document.getElementById('test-results');
    if (!testContainer) return;
    
    const testDiv = document.createElement('div');
    testDiv.className = `test-result ${result.passed ? 'passed' : 'failed'}`;
    testDiv.innerHTML = `
        <div class="test-name">${result.name}</div>
        <div class="test-message">${result.message}</div>
        <div class="test-time">${new Date(result.timestamp).toLocaleTimeString()}</div>
    `;
    
    testContainer.appendChild(testDiv);
}

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function testAppInitialization() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        console.log('üìç –¢–µ–∫—É—â–∏–π URL:', window.location.href);
        console.log('üìç –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', document.title);
        console.log('üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—Ä–∏–ø—Ç–æ–≤:', document.scripts.length);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–∫—Ä–∏–ø—Ç–æ–≤
        const appScript = Array.from(document.scripts).find(script => 
            script.src && script.src.includes('app-simple.js')
        );
        console.log('üìç –°–∫—Ä–∏–ø—Ç app-simple.js:', appScript ? '–∑–∞–≥—Ä—É–∂–µ–Ω' : '–ù–ï –ó–ê–ì–†–£–ñ–ï–ù');
        if (appScript) {
            console.log('üìç URL —Å–∫—Ä–∏–ø—Ç–∞:', appScript.src);
            console.log('üìç –í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', appScript.src.match(/v=(\d+)/)?.[1] || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞');
        }
        
        console.log('üìç window.app:', window.app);
        console.log('üìç typeof window.app:', typeof window.app);
        console.log('üìç window.WindowRepairApp:', window.WindowRepairApp);
        console.log('üìç typeof window.WindowRepairApp:', typeof window.WindowRepairApp);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        console.log('üìç window.showOrderCards:', typeof window.showOrderCards);
        console.log('üìç window.viewOrderCard:', typeof window.viewOrderCard);
        console.log('üìç window.startWork:', typeof window.startWork);
        
        // –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        if (!window.app) {
            console.log('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...');
            if (typeof window.WindowRepairApp === 'function') {
                try {
                    window.app = new window.WindowRepairApp();
                    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤—Ä—É—á–Ω—É—é');
                } catch (initError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', initError);
                }
            } else {
                console.error('‚ùå WindowRepairApp –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        }
        
        assert(window.app !== undefined, '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        console.log('‚úÖ window.app –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
        
        assert(typeof window.app === 'object', 'app –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º');
        console.log('‚úÖ window.app —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        const basicMethods = ['checkAuth', 'showMainApp', 'setupRoleBasedUI'];
        let basicMethodsFound = 0;
        basicMethods.forEach(method => {
            if (typeof window.app[method] === 'function') {
                basicMethodsFound++;
                console.log(`‚úÖ –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ ${method} –Ω–∞–π–¥–µ–Ω`);
            } else {
                console.log(`‚ùå –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ ${method} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        const hasRequiredMethods = [
            'viewOrderCard', 'startWork', 'declineOrder', 'cancelOrder',
            'sendEstimate', 'completeOrder', 'editOrder', 'deleteOrder',
            'restoreOrder', 'showOrderCards', 'performSearch', 'clearSearch'
        ];
        
        let methodsFound = 0;
        hasRequiredMethods.forEach(method => {
            if (typeof window.app[method] === 'function') {
                methodsFound++;
                console.log(`‚úÖ –ú–µ—Ç–æ–¥ ${method} –Ω–∞–π–¥–µ–Ω`);
            } else {
                console.log(`‚ùå –ú–µ—Ç–æ–¥ ${method} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });
        
        const success = basicMethodsFound === basicMethods.length;
        logTest('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', success, 
            `–ë–∞–∑–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤: ${basicMethodsFound}/${basicMethods.length}, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${methodsFound}/${hasRequiredMethods.length}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        logTest('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function testDOMElements() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');
        console.log('üìç –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', document.querySelectorAll('*').length);
        console.log('üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å ID:', document.querySelectorAll('[id]').length);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const allIds = Array.from(document.querySelectorAll('[id]')).map(el => el.id);
        console.log('üìç –í—Å–µ ID –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', allIds);
        
        const requiredElements = [
            'loginScreen',
            'mainApp',
            'dashboardPage',
            'ordersPage',
            'newOrderModal',
            'orderCardsContainer'
        ];
        
        let foundElements = 0;
        for (const elementId of requiredElements) {
            const element = document.getElementById(elementId);
            if (element) {
                foundElements++;
                console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç ${elementId}: –Ω–∞–π–¥–µ–Ω`);
                console.log(`   - –¢–µ–≥: ${element.tagName}`);
                console.log(`   - –ö–ª–∞—Å—Å—ã: ${element.className}`);
                console.log(`   - –í–∏–¥–∏–º—ã–π: ${element.offsetWidth > 0 && element.offsetHeight > 0}`);
            } else {
                console.log(`‚ùå –≠–ª–µ–º–µ–Ω—Ç ${elementId}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ ID
                const similarIds = allIds.filter(id => 
                    id.toLowerCase().includes(elementId.toLowerCase()) ||
                    elementId.toLowerCase().includes(id.toLowerCase())
                );
                if (similarIds.length > 0) {
                    console.log(`   - –ü–æ—Ö–æ–∂–∏–µ ID: ${similarIds.join(', ')}`);
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        const criticalElements = ['loginScreen', 'mainApp'];
        let criticalFound = 0;
        criticalElements.forEach(id => {
            if (document.getElementById(id)) {
                criticalFound++;
                console.log(`‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç ${id}: –Ω–∞–π–¥–µ–Ω`);
            } else {
                console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç ${id}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const alternativeElements = [
            { id: 'loginScreen', alternatives: ['login', 'auth', 'signin'] },
            { id: 'mainApp', alternatives: ['app', 'main', 'content'] }
        ];
        
        let alternativesFound = 0;
        alternativeElements.forEach(({ id, alternatives }) => {
            if (!document.getElementById(id)) {
                const found = alternatives.find(alt => document.getElementById(alt));
                if (found) {
                    alternativesFound++;
                    console.log(`‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è ${id}: ${found}`);
                }
            }
        });
        
        const success = criticalFound === criticalElements.length || alternativesFound > 0;
        logTest('DOM —ç–ª–µ–º–µ–Ω—Ç—ã', success, 
            `–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${foundElements}/${requiredElements.length}, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: ${criticalFound}/${criticalElements.length}, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤: ${alternativesFound}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', error);
        console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        logTest('DOM —ç–ª–µ–º–µ–Ω—Ç—ã', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –∫–ª–∞—Å—Å–æ–≤
function testCSSClasses() {
    try {
        const requiredClasses = [
            'btn-3d',
            'burger-menu-3d',
            'burger-dropdown-3d',
            'btn-group-3d',
            'order-card'
        ];
        
        let foundClasses = 0;
        for (const className of requiredClasses) {
            const elements = document.getElementsByClassName(className);
            if (elements.length > 0) {
                foundClasses++;
            }
        }
        
        assert(foundClasses > 0, '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã CSS –∫–ª–∞—Å—Å—ã');
        
        logTest('CSS –∫–ª–∞—Å—Å—ã', true, `–ù–∞–π–¥–µ–Ω–æ ${foundClasses}/${requiredClasses.length} –∫–ª–∞—Å—Å–æ–≤`);
        return true;
    } catch (error) {
        logTest('CSS –∫–ª–∞—Å—Å—ã', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
function testGlobalFunctions() {
    try {
        const requiredFunctions = [
            'showOrderCards',
            'viewOrderCard',
            'startWork',
            'declineOrder',
            'cancelOrder',
            'editOrder',
            'sendEstimate',
            'completeOrder',
            'deleteOrder',
            'restoreOrder'
        ];
        
        for (const funcName of requiredFunctions) {
            assert(typeof window[funcName] === 'function', `–§—É–Ω–∫—Ü–∏—è ${funcName} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ`);
        }
        
        logTest('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏', true, `–í—Å–µ ${requiredFunctions.length} —Ñ—É–Ω–∫—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã`);
        return true;
    } catch (error) {
        logTest('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function testModals() {
    try {
        const modals = [
            'newOrderModal',
            'editOrderModal',
            'newUserModal',
            'hierarchyModal'
        ];
        
        for (const modalId of modals) {
            const modal = document.getElementById(modalId);
            assert(modal !== null, `–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ ${modalId} –¥–æ–ª–∂–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å`);
            assert(modal.classList.contains('modal'), `${modalId} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º`);
        }
        
        logTest('–ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞', true, `–í—Å–µ ${modals.length} –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –Ω–∞–π–¥–µ–Ω—ã`);
        return true;
    } catch (error) {
        logTest('–ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
function testResponsiveness() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ CSS
        const styleSheets = document.styleSheets;
        let hasMediaQueries = false;
        
        for (let i = 0; i < styleSheets.length; i++) {
            try {
                const rules = styleSheets[i].cssRules || styleSheets[i].rules;
                for (let j = 0; j < rules.length; j++) {
                    if (rules[j].type === CSSRule.MEDIA_RULE) {
                        hasMediaQueries = true;
                        break;
                    }
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ CORS
            }
        }
        
        assert(hasMediaQueries, '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏');
        
        logTest('–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å', true, '–ú–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞–π–¥–µ–Ω—ã');
        return true;
    } catch (error) {
        logTest('–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
function testPerformance() {
    try {
        const startTime = performance.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        const scripts = document.getElementsByTagName('script');
        const styles = document.getElementsByTagName('link');
        
        const loadTime = performance.now() - startTime;
        
        assert(loadTime < 1000, '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ–π (< 1 —Å–µ–∫)');
        assert(scripts.length > 0, '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã');
        assert(styles.length > 0, '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å—Ç–∏–ª–∏');
        
        logTest('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', true, `–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${loadTime.toFixed(2)}ms`);
        return true;
    } catch (error) {
        logTest('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º
function testFormValidation() {
    try {
        const newOrderForm = document.querySelector('#newOrderModal form');
        assert(newOrderForm !== null, '–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å');
        
        const requiredFields = ['clientName', 'clientPhone', 'address'];
        for (const fieldId of requiredFields) {
            const field = document.getElementById(fieldId);
            assert(field !== null, `–ü–æ–ª–µ ${fieldId} –¥–æ–ª–∂–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å`);
        }
        
        logTest('–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º', true, `–í—Å–µ ${requiredFields.length} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–∞–π–¥–µ–Ω—ã`);
        return true;
    } catch (error) {
        logTest('–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º', false, error.message);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è assert –¥–ª—è —Ç–µ—Å—Ç–æ–≤
function assert(condition, message) {
    if (!condition) {
        throw new Error(message);
    }
}

// –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ 3D —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
function test3DEffects() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ 3D —ç—Ñ—Ñ–µ–∫—Ç–æ–≤...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3D –∫–ª–∞—Å—Å–æ–≤
        const threeDClasses = [
            'btn-3d', 'burger-menu-3d', 'burger-dropdown-3d', 
            'btn-group-3d', 'order-card-3d'
        ];
        
        let foundClasses = 0;
        threeDClasses.forEach(className => {
            const elements = document.getElementsByClassName(className);
            if (elements.length > 0) {
                foundClasses++;
                console.log(`‚úÖ 3D –∫–ª–∞—Å—Å ${className}: ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
            } else {
                console.log(`‚ùå 3D –∫–ª–∞—Å—Å ${className}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è 3D
        const computedStyle = getComputedStyle(document.documentElement);
        const has3DVariables = [
            '--shadow-3d', '--border-3d', '--transform-3d'
        ];
        
        let variablesFound = 0;
        has3DVariables.forEach(variable => {
            const value = computedStyle.getPropertyValue(variable);
            if (value && value.trim() !== '') {
                variablesFound++;
                console.log(`‚úÖ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${variable}: ${value}`);
            } else {
                console.log(`‚ùå CSS –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${variable}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            }
        });
        
        logTest('3D —ç—Ñ—Ñ–µ–∫—Ç—ã', foundClasses > 0, 
            `–ù–∞–π–¥–µ–Ω–æ 3D –∫–ª–∞—Å—Å–æ–≤: ${foundClasses}/${threeDClasses.length}, CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${variablesFound}/${has3DVariables.length}`);
        return foundClasses > 0;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ 3D —ç—Ñ—Ñ–µ–∫—Ç–æ–≤:', error);
        logTest('3D —ç—Ñ—Ñ–µ–∫—Ç—ã', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
function testChangeLogging() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        const loggingFunctions = [
            'logOrderHistory', 'logUserAction', 'logSystemEvent'
        ];
        
        let functionsFound = 0;
        loggingFunctions.forEach(funcName => {
            if (typeof window[funcName] === 'function') {
                functionsFound++;
                console.log(`‚úÖ –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ${funcName}: –Ω–∞–π–¥–µ–Ω–∞`);
            } else {
                console.log(`‚ùå –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ${funcName}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        const historyElements = [
            'orderHistoryContent', 'auditLogContent', 'changeLogContainer'
        ];
        
        let elementsFound = 0;
        historyElements.forEach(elementId => {
            const element = document.getElementById(elementId);
            if (element) {
                elementsFound++;
                console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ ${elementId}: –Ω–∞–π–¥–µ–Ω`);
            } else {
                console.log(`‚ùå –≠–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ ${elementId}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ API –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        const hasHistoryAPI = typeof window.app !== 'undefined' && 
            typeof window.app.loadOrderHistory === 'function';
        console.log('API –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', hasHistoryAPI ? '–Ω–∞–π–¥–µ–Ω–æ' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        
        logTest('–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π', functionsFound > 0 || elementsFound > 0, 
            `–§—É–Ω–∫—Ü–∏–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: ${functionsFound}/${loggingFunctions.length}, —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏: ${elementsFound}/${historyElements.length}, API: ${hasHistoryAPI ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
        return functionsFound > 0 || elementsFound > 0;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        logTest('–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function testMainAppPage() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–µ—Å—Ç–æ–≤
        const isTestPage = window.location.href.includes('/tests/');
        console.log('üìç –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–æ–≤:', isTestPage ? '–¥–∞' : '–Ω–µ—Ç');
        
        if (isTestPage) {
            console.log('‚ö†Ô∏è –¢–µ—Å—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–µ—Å—Ç–æ–≤, –∞ –Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
            console.log('üìç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ http://188.120.240.71/');
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ iframe
            const iframe = document.createElement('iframe');
            iframe.src = '../public/index.html';
            iframe.style.display = 'none';
            document.body.appendChild(iframe);
            
            return new Promise((resolve) => {
                iframe.onload = () => {
                    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ iframe');
                    const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
                    const mainApp = iframeDoc.getElementById('mainApp');
                    const loginScreen = iframeDoc.getElementById('loginScreen');
                    
                    console.log('üìç mainApp –≤ iframe:', mainApp ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
                    console.log('üìç loginScreen –≤ iframe:', loginScreen ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
                    
                    document.body.removeChild(iframe);
                    
                    const success = !!(mainApp || loginScreen);
                    logTest('–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', success, 
                        `–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–æ–≤: ${isTestPage}, —ç–ª–µ–º–µ–Ω—Ç—ã –≤ iframe: ${success ? '–Ω–∞–π–¥–µ–Ω—ã' : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}`);
                    resolve(success);
                };
                
                iframe.onerror = () => {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ iframe');
                    document.body.removeChild(iframe);
                    logTest('–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', false, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
                    resolve(false);
                };
            });
        } else {
            // –ú—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            console.log('‚úÖ –¢–µ—Å—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
            const mainApp = document.getElementById('mainApp');
            const loginScreen = document.getElementById('loginScreen');
            
            console.log('üìç mainApp:', mainApp ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
            console.log('üìç loginScreen:', loginScreen ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
            
            const success = !!(mainApp || loginScreen);
            logTest('–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', success, 
                `–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${!isTestPage}, —ç–ª–µ–º–µ–Ω—Ç—ã: ${success ? '–Ω–∞–π–¥–µ–Ω—ã' : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}`);
            return success;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
        logTest('–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 12: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–µ–Ω–¥–∞ API
async function testBackendAPI() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–µ–Ω–¥–∞ API...');
        
        const baseUrl = window.location.origin;
        console.log('üìç –ë–∞–∑–æ–≤—ã–π URL:', baseUrl);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ API endpoints
        const apiTests = [
            { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', url: '/api/auth/check', method: 'GET' },
            { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', url: '/api/users', method: 'GET' },
            { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤', url: '/api/orders', method: 'GET' },
            { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤', url: '/api/services', method: 'GET' }
        ];
        
        let successfulTests = 0;
        const results = [];
        
        for (const test of apiTests) {
            try {
                console.log(`üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º ${test.name}...`);
                const response = await fetch(`${baseUrl}${test.url}`, {
                    method: test.method,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = {
                    name: test.name,
                    url: test.url,
                    status: response.status,
                    ok: response.ok,
                    statusText: response.statusText
                };
                
                if (response.ok) {
                    try {
                        const data = await response.json();
                        result.data = data;
                        console.log(`‚úÖ ${test.name}: ${response.status} ${response.statusText}`);
                        console.log(`   - –î–∞–Ω–Ω—ã–µ:`, data);
                    } catch (e) {
                        console.log(`‚úÖ ${test.name}: ${response.status} ${response.statusText} (–Ω–µ JSON)`);
                    }
                    successfulTests++;
                } else {
                    console.log(`‚ùå ${test.name}: ${response.status} ${response.statusText}`);
                }
                
                results.push(result);
            } catch (error) {
                console.log(`‚ùå ${test.name}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - ${error.message}`);
                results.push({
                    name: test.name,
                    url: test.url,
                    error: error.message
                });
            }
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        console.log('üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
        try {
            const loginResponse = await fetch(`${baseUrl}/api/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    username: 'admin',
                    password: 'admin123'
                })
            });
            
            if (loginResponse.ok) {
                const loginData = await loginResponse.json();
                console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: —É—Å–ø–µ—à–Ω–æ');
                console.log('   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', loginData.user);
                
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ endpoints —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
                const protectedTests = [
                    { name: '–ó–∞–∫–∞–∑—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π', url: '/api/orders' },
                    { name: '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', url: '/api/user/profile' }
                ];
                
                for (const test of protectedTests) {
                    try {
                        const response = await fetch(`${baseUrl}${test.url}`, {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json',
                                'Cookie': loginResponse.headers.get('set-cookie') || ''
                            }
                        });
                        
                        if (response.ok) {
                            console.log(`‚úÖ ${test.name}: ${response.status}`);
                            successfulTests++;
                        } else {
                            console.log(`‚ùå ${test.name}: ${response.status}`);
                        }
                    } catch (error) {
                        console.log(`‚ùå ${test.name}: ${error.message}`);
                    }
                }
            } else {
                console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –Ω–µ —É–¥–∞–ª–∞—Å—å');
            }
        } catch (error) {
            console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –æ—à–∏–±–∫–∞ -', error.message);
        }
        
        const success = successfulTests > 0;
        logTest('–ë—ç–∫–µ–Ω–¥ API', success, 
            `–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successfulTests}/${apiTests.length + 3}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${JSON.stringify(results, null, 2)}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—ç–∫–µ–Ω–¥–∞:', error);
        logTest('–ë—ç–∫–µ–Ω–¥ API', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 13: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function testPerformance() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
        
        const startTime = performance.now();
        console.log('üìç –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞:', startTime);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const navigation = performance.getEntriesByType('navigation')[0];
        if (navigation) {
            console.log('üìç –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
            console.log('   - DNS lookup:', navigation.domainLookupEnd - navigation.domainLookupStart, 'ms');
            console.log('   - TCP connect:', navigation.connectEnd - navigation.connectStart, 'ms');
            console.log('   - Request:', navigation.responseStart - navigation.requestStart, 'ms');
            console.log('   - Response:', navigation.responseEnd - navigation.responseStart, 'ms');
            console.log('   - DOM loading:', navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart, 'ms');
            console.log('   - Page load:', navigation.loadEventEnd - navigation.loadEventStart, 'ms');
            console.log('   - Total:', navigation.loadEventEnd - navigation.navigationStart, 'ms');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤
        const scripts = performance.getEntriesByType('resource').filter(entry => 
            entry.name.includes('.js')
        );
        console.log('üìç –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤:');
        scripts.forEach(script => {
            console.log(`   - ${script.name.split('/').pop()}: ${script.duration.toFixed(2)}ms`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        if (performance.memory) {
            console.log('üìç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:');
            console.log('   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:', (performance.memory.usedJSHeapSize / 1024 / 1024).toFixed(2), 'MB');
            console.log('   - –í—Å–µ–≥–æ:', (performance.memory.totalJSHeapSize / 1024 / 1024).toFixed(2), 'MB');
            console.log('   - –õ–∏–º–∏—Ç:', (performance.memory.jsHeapSizeLimit / 1024 / 1024).toFixed(2), 'MB');
        }
        
        const endTime = performance.now();
        const testDuration = endTime - startTime;
        console.log('üìç –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:', testDuration.toFixed(2), 'ms');
        
        const success = testDuration < 1000; // –¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
        logTest('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', success, 
            `–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${testDuration.toFixed(2)}ms, —Å–∫—Ä–∏–ø—Ç–æ–≤: ${scripts.length}, –ø–∞–º—è—Ç—å: ${performance.memory ? (performance.memory.usedJSHeapSize / 1024 / 1024).toFixed(2) + 'MB' : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
        logTest('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 14: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function testSecurity() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
        
        let securityScore = 0;
        const checks = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS
        const isHTTPS = window.location.protocol === 'https:';
        checks.push({
            name: 'HTTPS',
            passed: isHTTPS,
            message: isHTTPS ? '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTPS' : '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTP'
        });
        if (isHTTPS) securityScore++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content Security Policy
        const csp = document.querySelector('meta[http-equiv="Content-Security-Policy"]');
        checks.push({
            name: 'CSP',
            passed: !!csp,
            message: csp ? 'Content Security Policy –Ω–∞—Å—Ç—Ä–æ–µ–Ω' : 'Content Security Policy –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        });
        if (csp) securityScore++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º X-Frame-Options
        const xFrameOptions = document.querySelector('meta[http-equiv="X-Frame-Options"]');
        checks.push({
            name: 'X-Frame-Options',
            passed: !!xFrameOptions,
            message: xFrameOptions ? 'X-Frame-Options –Ω–∞—Å—Ç—Ä–æ–µ–Ω' : 'X-Frame-Options –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        });
        if (xFrameOptions) securityScore++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º X-Content-Type-Options
        const xContentTypeOptions = document.querySelector('meta[http-equiv="X-Content-Type-Options"]');
        checks.push({
            name: 'X-Content-Type-Options',
            passed: !!xContentTypeOptions,
            message: xContentTypeOptions ? 'X-Content-Type-Options –Ω–∞—Å—Ç—Ä–æ–µ–Ω' : 'X-Content-Type-Options –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        });
        if (xContentTypeOptions) securityScore++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Referrer Policy
        const referrerPolicy = document.querySelector('meta[name="referrer"]');
        checks.push({
            name: 'Referrer Policy',
            passed: !!referrerPolicy,
            message: referrerPolicy ? 'Referrer Policy –Ω–∞—Å—Ç—Ä–æ–µ–Ω' : 'Referrer Policy –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        });
        if (referrerPolicy) securityScore++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ inline —Å–∫—Ä–∏–ø—Ç–æ–≤ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å)
        const inlineScripts = document.querySelectorAll('script:not([src])');
        checks.push({
            name: 'Inline Scripts',
            passed: inlineScripts.length === 0,
            message: `–ù–∞–π–¥–µ–Ω–æ inline —Å–∫—Ä–∏–ø—Ç–æ–≤: ${inlineScripts.length}`
        });
        if (inlineScripts.length === 0) securityScore++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ eval (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å)
        const hasEval = document.documentElement.innerHTML.includes('eval(');
        checks.push({
            name: 'Eval Usage',
            passed: !hasEval,
            message: hasEval ? '–ù–∞–π–¥–µ–Ω eval() - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å' : 'eval() –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'
        });
        if (!hasEval) securityScore++;
        
        console.log('üìç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:');
        checks.forEach(check => {
            console.log(`   - ${check.name}: ${check.passed ? '‚úÖ' : '‚ùå'} ${check.message}`);
        });
        
        const success = securityScore >= 3; // –ú–∏–Ω–∏–º—É–º 3 –∏–∑ 7 –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
        logTest('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', success, 
            `–ë–∞–ª–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${securityScore}/7, –ø—Ä–æ–≤–µ—Ä–æ–∫: ${checks.length}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error);
        logTest('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 15: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
function testScriptLoading() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤...');
        
        const requiredScripts = [
            { name: 'app-simple.js', pattern: /app-simple\.js/ },
            { name: 'Bootstrap', pattern: /bootstrap/ },
            { name: 'Font Awesome', pattern: /font-awesome|fontawesome/ }
        ];
        
        let loadedScripts = 0;
        const allScripts = Array.from(document.scripts);
        
        console.log('üìç –í—Å–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', allScripts.length);
        allScripts.forEach((script, index) => {
            console.log(`üìç –°–∫—Ä–∏–ø—Ç ${index + 1}:`, script.src || 'inline');
        });
        
        requiredScripts.forEach(({ name, pattern }) => {
            const found = allScripts.find(script => 
                script.src && pattern.test(script.src)
            );
            if (found) {
                loadedScripts++;
                console.log(`‚úÖ ${name}: –∑–∞–≥—Ä—É–∂–µ–Ω`);
                console.log(`   - URL: ${found.src}`);
                console.log(`   - –ó–∞–≥—Ä—É–∂–µ–Ω: ${found.readyState || 'unknown'}`);
            } else {
                console.log(`‚ùå ${name}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É CSS
        const allStylesheets = Array.from(document.styleSheets);
        console.log('üìç –í—Å–µ–≥–æ —Å—Ç–∏–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', allStylesheets.length);
        
        const hasBootstrapCSS = allStylesheets.some(sheet => 
            sheet.href && sheet.href.includes('bootstrap')
        );
        console.log('üìç Bootstrap CSS:', hasBootstrapCSS ? '–∑–∞–≥—Ä—É–∂–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
        
        const success = loadedScripts >= 1; // –•–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω
        logTest('–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤', success, 
            `–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–≤: ${loadedScripts}/${requiredScripts.length}, CSS: ${allStylesheets.length}`);
        return success;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤:', error);
        logTest('–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤', false, error.message);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...\n');
    console.log('üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–µ–¥–µ:');
    console.log('   - URL:', window.location.href);
    console.log('   - User Agent:', navigator.userAgent);
    console.log('   - –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞:', window.innerWidth + 'x' + window.innerHeight);
    console.log('   - –í—Ä–µ–º—è:', new Date().toLocaleString('ru-RU'));
    console.log('   - –ü—Ä–æ—Ç–æ–∫–æ–ª:', window.location.protocol);
    console.log('   - –•–æ—Å—Ç:', window.location.host);
    console.log('   - –ü—É—Ç—å:', window.location.pathname);
    console.log('');
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
    console.log('   - –ó–∞–≥–æ–ª–æ–≤–æ–∫:', document.title);
    console.log('   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', document.querySelectorAll('*').length);
    console.log('   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—Ä–∏–ø—Ç–æ–≤:', document.scripts.length);
    console.log('   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏–ª–µ–π:', document.styleSheets.length);
    console.log('   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–º:', document.forms.length);
    console.log('   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', document.images.length);
    console.log('');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤:');
    const scripts = Array.from(document.scripts);
    scripts.forEach((script, index) => {
        console.log(`   - –°–∫—Ä–∏–ø—Ç ${index + 1}:`, script.src || 'inline');
        if (script.src) {
            console.log(`     - –ó–∞–≥—Ä—É–∂–µ–Ω: ${script.readyState || 'unknown'}`);
            console.log(`     - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π: ${script.async}`);
            console.log(`     - –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π: ${script.defer}`);
        }
    });
    console.log('');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS
    const stylesheets = Array.from(document.styleSheets);
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS:');
    stylesheets.forEach((sheet, index) => {
        console.log(`   - –°—Ç–∏–ª—å ${index + 1}:`, sheet.href || 'inline');
        if (sheet.href) {
            try {
                console.log(`     - –ü—Ä–∞–≤–∏–ª: ${sheet.cssRules ? sheet.cssRules.length : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}`);
            } catch (e) {
                console.log(`     - –ü—Ä–∞–≤–∏–ª: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (CORS)`);
            }
        }
    });
    console.log('');
    
    const tests = [
        testMainAppPage,          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        testBackendAPI,           // –ù–æ–≤—ã–π —Ç–µ—Å—Ç - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–µ–Ω–¥–∞ API
        testPerformance,          // –ù–æ–≤—ã–π —Ç–µ—Å—Ç - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        testSecurity,             // –ù–æ–≤—ã–π —Ç–µ—Å—Ç - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        testScriptLoading,        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
        testAppInitialization,
        testDOMElements,
        testCSSClasses,
        testGlobalFunctions,
        testModals,
        testResponsiveness,
        testFormValidation,
        test3DEffects,
        testChangeLogging
    ];
    
    for (const test of tests) {
        try {
            await test();
            currentTest++;
        } catch (error) {
            console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
            currentTest++;
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    showFinalResults();
}

// –ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showFinalResults() {
    const passed = testResults.filter(r => r.passed).length;
    const total = testResults.length;
    const successRate = Math.round((passed / total) * 100);
    
    const resultsDiv = document.getElementById('test-summary');
    if (resultsDiv) {
        resultsDiv.innerHTML = `
            <div class="test-summary">
                <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
                <div class="summary-stats">
                    <div class="stat passed">‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}</div>
                    <div class="stat failed">‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${total - passed}</div>
                    <div class="stat total">üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%</div>
                </div>
                ${successRate === 100 ? '<div class="success-message">üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!</div>' : '<div class="warning-message">‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å</div>'}
            </div>
        `;
    }
    
    console.log(`\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${total - passed}/${total}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.FrontendTests = {
    runAllTests,
    testAppInitialization,
    testDOMElements,
    testCSSClasses,
    testGlobalFunctions,
    testModals,
    testResponsiveness,
    testPerformance,
    testFormValidation
};
