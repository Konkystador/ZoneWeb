/**
 * –¢–µ—Å—Ç—ã –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–∑–∞–ø—É—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
 * –û—Ç–∫—Ä–æ–π—Ç–µ tests/frontend-tests.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
let testResults = [];
let currentTest = 0;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function logTest(testName, passed, message = '') {
    const result = {
        name: testName,
        passed: passed,
        message: message,
        timestamp: new Date().toISOString()
    };
    testResults.push(result);
    
    const status = passed ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${testName}: ${message}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    updateTestUI(result);
}

function updateTestUI(result) {
    const testContainer = document.getElementById('test-results');
    if (!testContainer) return;
    
    const testDiv = document.createElement('div');
    testDiv.className = `test-result ${result.passed ? 'passed' : 'failed'}`;
    testDiv.innerHTML = `
        <div class="test-name">${result.name}</div>
        <div class="test-message">${result.message}</div>
        <div class="test-time">${new Date(result.timestamp).toLocaleTimeString()}</div>
    `;
    
    testContainer.appendChild(testDiv);
}

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function testAppInitialization() {
    try {
        assert(window.app !== undefined, '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        assert(typeof window.app === 'object', 'app –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º');
        assert(typeof window.app.checkAuth === 'function', 'checkAuth –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π');
        
        logTest('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', true, '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        return true;
    } catch (error) {
        logTest('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function testDOMElements() {
    try {
        const requiredElements = [
            'loginScreen',
            'mainApp',
            'dashboardPage',
            'ordersPage',
            'newOrderModal',
            'orderCardsContainer'
        ];
        
        for (const elementId of requiredElements) {
            const element = document.getElementById(elementId);
            assert(element !== null, `–≠–ª–µ–º–µ–Ω—Ç ${elementId} –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å`);
        }
        
        logTest('DOM —ç–ª–µ–º–µ–Ω—Ç—ã', true, `–í—Å–µ ${requiredElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω—ã`);
        return true;
    } catch (error) {
        logTest('DOM —ç–ª–µ–º–µ–Ω—Ç—ã', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –∫–ª–∞—Å—Å–æ–≤
function testCSSClasses() {
    try {
        const requiredClasses = [
            'btn-3d',
            'burger-menu-3d',
            'burger-dropdown-3d',
            'btn-group-3d',
            'order-card'
        ];
        
        let foundClasses = 0;
        for (const className of requiredClasses) {
            const elements = document.getElementsByClassName(className);
            if (elements.length > 0) {
                foundClasses++;
            }
        }
        
        assert(foundClasses > 0, '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã CSS –∫–ª–∞—Å—Å—ã');
        
        logTest('CSS –∫–ª–∞—Å—Å—ã', true, `–ù–∞–π–¥–µ–Ω–æ ${foundClasses}/${requiredClasses.length} –∫–ª–∞—Å—Å–æ–≤`);
        return true;
    } catch (error) {
        logTest('CSS –∫–ª–∞—Å—Å—ã', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
function testGlobalFunctions() {
    try {
        const requiredFunctions = [
            'showOrderCards',
            'viewOrderCard',
            'startWork',
            'declineOrder',
            'cancelOrder',
            'editOrder',
            'sendEstimate',
            'completeOrder',
            'deleteOrder',
            'restoreOrder'
        ];
        
        for (const funcName of requiredFunctions) {
            assert(typeof window[funcName] === 'function', `–§—É–Ω–∫—Ü–∏—è ${funcName} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ`);
        }
        
        logTest('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏', true, `–í—Å–µ ${requiredFunctions.length} —Ñ—É–Ω–∫—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã`);
        return true;
    } catch (error) {
        logTest('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function testModals() {
    try {
        const modals = [
            'newOrderModal',
            'editOrderModal',
            'newUserModal',
            'hierarchyModal'
        ];
        
        for (const modalId of modals) {
            const modal = document.getElementById(modalId);
            assert(modal !== null, `–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ ${modalId} –¥–æ–ª–∂–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å`);
            assert(modal.classList.contains('modal'), `${modalId} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º`);
        }
        
        logTest('–ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞', true, `–í—Å–µ ${modals.length} –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –Ω–∞–π–¥–µ–Ω—ã`);
        return true;
    } catch (error) {
        logTest('–ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
function testResponsiveness() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ CSS
        const styleSheets = document.styleSheets;
        let hasMediaQueries = false;
        
        for (let i = 0; i < styleSheets.length; i++) {
            try {
                const rules = styleSheets[i].cssRules || styleSheets[i].rules;
                for (let j = 0; j < rules.length; j++) {
                    if (rules[j].type === CSSRule.MEDIA_RULE) {
                        hasMediaQueries = true;
                        break;
                    }
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ CORS
            }
        }
        
        assert(hasMediaQueries, '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏');
        
        logTest('–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å', true, '–ú–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞–π–¥–µ–Ω—ã');
        return true;
    } catch (error) {
        logTest('–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
function testPerformance() {
    try {
        const startTime = performance.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        const scripts = document.getElementsByTagName('script');
        const styles = document.getElementsByTagName('link');
        
        const loadTime = performance.now() - startTime;
        
        assert(loadTime < 1000, '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ–π (< 1 —Å–µ–∫)');
        assert(scripts.length > 0, '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã');
        assert(styles.length > 0, '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å—Ç–∏–ª–∏');
        
        logTest('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', true, `–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${loadTime.toFixed(2)}ms`);
        return true;
    } catch (error) {
        logTest('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', false, error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º
function testFormValidation() {
    try {
        const newOrderForm = document.querySelector('#newOrderModal form');
        assert(newOrderForm !== null, '–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å');
        
        const requiredFields = ['clientName', 'clientPhone', 'address'];
        for (const fieldId of requiredFields) {
            const field = document.getElementById(fieldId);
            assert(field !== null, `–ü–æ–ª–µ ${fieldId} –¥–æ–ª–∂–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å`);
        }
        
        logTest('–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º', true, `–í—Å–µ ${requiredFields.length} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–∞–π–¥–µ–Ω—ã`);
        return true;
    } catch (error) {
        logTest('–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º', false, error.message);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è assert –¥–ª—è —Ç–µ—Å—Ç–æ–≤
function assert(condition, message) {
    if (!condition) {
        throw new Error(message);
    }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...\n');
    
    const tests = [
        testAppInitialization,
        testDOMElements,
        testCSSClasses,
        testGlobalFunctions,
        testModals,
        testResponsiveness,
        testPerformance,
        testFormValidation
    ];
    
    for (const test of tests) {
        try {
            await test();
            currentTest++;
        } catch (error) {
            console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
            currentTest++;
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    showFinalResults();
}

// –ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showFinalResults() {
    const passed = testResults.filter(r => r.passed).length;
    const total = testResults.length;
    const successRate = Math.round((passed / total) * 100);
    
    const resultsDiv = document.getElementById('test-summary');
    if (resultsDiv) {
        resultsDiv.innerHTML = `
            <div class="test-summary">
                <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
                <div class="summary-stats">
                    <div class="stat passed">‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}</div>
                    <div class="stat failed">‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${total - passed}</div>
                    <div class="stat total">üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%</div>
                </div>
                ${successRate === 100 ? '<div class="success-message">üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!</div>' : '<div class="warning-message">‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å</div>'}
            </div>
        `;
    }
    
    console.log(`\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${total - passed}/${total}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.FrontendTests = {
    runAllTests,
    testAppInitialization,
    testDOMElements,
    testCSSClasses,
    testGlobalFunctions,
    testModals,
    testResponsiveness,
    testPerformance,
    testFormValidation
};
