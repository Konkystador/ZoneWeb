/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã API –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
 * –ó–∞–ø—É—Å–∫: node tests/comprehensive-api-tests.js
 */

const http = require('http');
const assert = require('assert');

const BASE_URL = 'http://188.120.240.71';
const TEST_USERS = {
    admin: { username: 'admin', password: 'admin123', role: 'admin' },
    manager: { username: 'manager', password: 'manager123', role: 'manager' },
    worker: { username: 'worker', password: 'worker123', role: 'worker' }
};

let authCookies = {};
let testData = {
    orders: [],
    users: [],
    services: []
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(options, data = null) {
    return new Promise((resolve, reject) => {
        const req = http.request(options, (res) => {
            let body = '';
            res.on('data', (chunk) => body += chunk);
            res.on('end', () => {
                try {
                    const result = {
                        statusCode: res.statusCode,
                        headers: res.headers,
                        body: body ? JSON.parse(body) : null
                    };
                    resolve(result);
                } catch (e) {
                    resolve({
                        statusCode: res.statusCode,
                        headers: res.headers,
                        body: body
                    });
                }
            });
        });
        
        req.on('error', reject);
        
        if (data) {
            req.write(JSON.stringify(data));
        }
        
        req.end();
    });
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loginUser(userType) {
    const user = TEST_USERS[userType];
    console.log(`üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ${userType}...`);
    
    const result = await makeRequest({
        hostname: '188.120.240.71',
        port: 80,
        path: '/api/login',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    }, user);
    
    assert.strictEqual(result.statusCode, 200, `–õ–æ–≥–∏–Ω ${userType} –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200`);
    assert.strictEqual(result.body.success, true, `–õ–æ–≥–∏–Ω ${userType} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º cookie
    if (result.headers['set-cookie']) {
        authCookies[userType] = result.headers['set-cookie'][0];
    } else {
        // –ï—Å–ª–∏ cookie –Ω–µ –ø—Ä–∏—à–µ–ª, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        authCookies[userType] = '';
    }
    
    console.log(`‚úÖ ${userType} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`);
    return result.body.user;
}

// –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
async function testAllRolesAuth() {
    console.log('\nüë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ä–æ–ª–µ–π...');
    
    for (const [role, user] of Object.entries(TEST_USERS)) {
        await loginUser(role);
    }
    
    console.log('‚úÖ –í—Å–µ —Ä–æ–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
    return true;
}

// –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function testOrderCreationByRoles() {
    console.log('\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏...');
    
    const orderData = {
        client_name: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
        client_phone: '+7-999-123-45-67',
        address: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å, 123',
        city: '–ú–æ—Å–∫–≤–∞',
        street: '–¢–µ—Å—Ç–æ–≤–∞—è —É–ª–∏—Ü–∞',
        house: '123',
        problem_description: '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
        visit_date: '2024-10-20T10:00:00'
    };
    
    for (const role of Object.keys(TEST_USERS)) {
        const result = await makeRequest({
            hostname: '188.120.240.71',
            port: 80,
            path: '/api/orders',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Cookie': authCookies[role]
            }
        }, orderData);
        
        assert.strictEqual(result.statusCode, 200, `–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ${role} –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200`);
        assert.ok(result.body.id, `–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è ID –∑–∞–∫–∞–∑–∞ –¥–ª—è ${role}`);
        
        testData.orders.push({ id: result.body.id, created_by: role });
        console.log(`‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω ${role}, ID: ${result.body.id}`);
    }
    
    return true;
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–∞
async function testRoleBasedAccess() {
    console.log('\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–∞...');
    
    // –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
    const adminUsersResult = await makeRequest({
        hostname: '188.120.240.71',
        port: 80,
        path: '/api/users',
        method: 'GET',
        headers: {
            'Cookie': authCookies.admin
        }
    });
    
    assert.strictEqual(adminUsersResult.statusCode, 200, '–ê–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    
    const managerUsersResult = await makeRequest({
        hostname: '188.120.240.71',
        port: 80,
        path: '/api/users',
        method: 'GET',
        headers: {
            'Cookie': authCookies.manager
        }
    });
    
    assert.strictEqual(managerUsersResult.statusCode, 403, '–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    
    console.log('‚úÖ –†–æ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return true;
}

// –¢–µ—Å—Ç 4: CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏
async function testOrderCRUD() {
    console.log('\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏...');
    
    const orderId = testData.orders[0].id;
    
    // –ß—Ç–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const getResult = await makeRequest({
        hostname: '188.120.240.71',
        port: 80,
        path: `/api/orders/${orderId}`,
        method: 'GET',
        headers: {
            'Cookie': authCookies.admin
        }
    });
    
    assert.strictEqual(getResult.statusCode, 200, '–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
    assert.ok(getResult.body.id, '–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∑–∞–∫–∞–∑');
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    const updateResult = await makeRequest({
        hostname: '188.120.240.71',
        port: 80,
        path: `/api/orders/${orderId}`,
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
            'Cookie': authCookies.admin
        }
    }, { status: 'in_progress' });
    
    assert.strictEqual(updateResult.statusCode, 200, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    const getAllResult = await makeRequest({
        hostname: '188.120.240.71',
        port: 80,
        path: '/api/orders',
        method: 'GET',
        headers: {
            'Cookie': authCookies.admin
        }
    });
    
    assert.strictEqual(getAllResult.statusCode, 200, '–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
    assert.ok(Array.isArray(getAllResult.body), '–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤');
    
    console.log('‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return true;
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function testUserProfile() {
    console.log('\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    const getProfileResult = await makeRequest({
        hostname: '188.120.240.71',
        port: 80,
        path: '/api/user/profile',
        method: 'GET',
        headers: {
            'Cookie': authCookies.admin
        }
    });
    
    assert.strictEqual(getProfileResult.statusCode, 200, '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    const updateProfileResult = await makeRequest({
        hostname: '188.120.240.71',
        port: 80,
        path: '/api/user/profile',
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
            'Cookie': authCookies.admin
        }
    }, {
        full_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        phone1: '+7-999-123-45-67',
        telegram: '@testadmin'
    });
    
    assert.strictEqual(updateProfileResult.statusCode, 200, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
    
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return true;
}

// –¢–µ—Å—Ç 6: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
async function testUserManagement() {
    console.log('\nüë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUserData = {
        username: 'testuser',
        password: 'testpass123',
        role: 'worker',
        full_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    };
    
    const createUserResult = await makeRequest({
        hostname: '188.120.240.71',
        port: 80,
        path: '/api/users',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Cookie': authCookies.admin
        }
    }, newUserData);
    
    assert.strictEqual(createUserResult.statusCode, 200, '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
    assert.ok(createUserResult.body.id, '–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    testData.users.push({ id: createUserResult.body.id, username: 'testuser' });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updateUserResult = await makeRequest({
        hostname: '188.120.240.71',
        port: 80,
        path: `/api/users/${createUserResult.body.id}`,
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
            'Cookie': authCookies.admin
        }
    }, {
        full_name: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        role: 'manager'
    });
    
    assert.strictEqual(updateUserResult.statusCode, 200, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
    
    console.log('‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return true;
}

// –¢–µ—Å—Ç 7: –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã
async function testServicesManagement() {
    console.log('\nüõ† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏...');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥
    const getServicesResult = await makeRequest({
        hostname: '188.120.240.71',
        port: 80,
        path: '/api/services',
        method: 'GET',
        headers: {
            'Cookie': authCookies.admin
        }
    });
    
    assert.strictEqual(getServicesResult.statusCode, 200, '–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
    assert.ok(Array.isArray(getServicesResult.body), '–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –º–∞—Å—Å–∏–≤ —É—Å–ª—É–≥');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
    const newServiceData = {
        name: '–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞',
        category: 'repair',
        calculation_type: 'fixed_price',
        base_price: 1000,
        unit: '—à—Ç',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —É—Å–ª—É–≥–∏'
    };
    
    const createServiceResult = await makeRequest({
        hostname: '188.120.240.71',
        port: 80,
        path: '/api/services',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Cookie': authCookies.admin
        }
    }, newServiceData);
    
    assert.strictEqual(createServiceResult.statusCode, 200, '–°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
    assert.ok(createServiceResult.body.id, '–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è ID —É—Å–ª—É–≥–∏');
    
    testData.services.push({ id: createServiceResult.body.id, name: '–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞' });
    
    console.log('‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return true;
}

// –¢–µ—Å—Ç 8: –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
async function testSearchAndFilter() {
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...');
    
    // –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤
    const searchResult = await makeRequest({
        hostname: '188.120.240.71',
        port: 80,
        path: '/api/orders/search?client_name=' + encodeURIComponent('–¢–µ—Å—Ç–æ–≤—ã–π'),
        method: 'GET',
        headers: {
            'Cookie': authCookies.admin
        }
    });
    
    // –ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 –∏–ª–∏ 404 (–µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
    assert.ok([200, 404].includes(searchResult.statusCode), '–ü–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 –∏–ª–∏ 404');
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    const filterResult = await makeRequest({
        hostname: '188.120.240.71',
        port: 80,
        path: '/api/orders?status=pending',
        method: 'GET',
        headers: {
            'Cookie': authCookies.admin
        }
    });
    
    assert.strictEqual(filterResult.statusCode, 200, '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
    assert.ok(Array.isArray(filterResult.body), '–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤');
    
    console.log('‚úÖ –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return true;
}

// –¢–µ—Å—Ç 9: –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
async function testOrderHistory() {
    console.log('\nüìú –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
    
    const orderId = testData.orders[0].id;
    
    const historyResult = await makeRequest({
        hostname: '188.120.240.71',
        port: 80,
        path: `/api/orders/${orderId}/history`,
        method: 'GET',
        headers: {
            'Cookie': authCookies.admin
        }
    });
    
    assert.strictEqual(historyResult.statusCode, 200, '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
    assert.ok(Array.isArray(historyResult.body), '–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –º–∞—Å—Å–∏–≤ –∏—Å—Ç–æ—Ä–∏–∏');
    
    console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return true;
}

// –¢–µ—Å—Ç 10: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
async function testPerformance() {
    console.log('\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    
    const startTime = Date.now();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
    const promises = [];
    for (let i = 0; i < 10; i++) {
        promises.push(makeRequest({
            hostname: '188.120.240.71',
            port: 80,
            path: '/api/orders',
            method: 'GET',
            headers: {
                'Cookie': authCookies.admin
            }
        }));
    }
    
    await Promise.all(promises);
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    assert.ok(duration < 5000, `10 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 5 —Å–µ–∫—É–Ω–¥ (${duration}ms)`);
    
    console.log(`‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}ms –¥–ª—è 10 –∑–∞–ø—Ä–æ—Å–æ–≤`);
    return true;
}

// –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function cleanupTestData() {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    for (const order of testData.orders) {
        try {
            await makeRequest({
                hostname: '188.120.240.71',
                port: 80,
                path: `/api/orders/${order.id}`,
                method: 'DELETE',
                headers: {
                    'Cookie': authCookies.admin
                }
            });
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        }
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const user of testData.users) {
        try {
            await makeRequest({
                hostname: '188.120.240.71',
                port: 80,
                path: `/api/users/${user.id}`,
                method: 'DELETE',
                headers: {
                    'Cookie': authCookies.admin
                }
            });
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        }
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Å–ª—É–≥
    for (const service of testData.services) {
        try {
            await makeRequest({
                hostname: '188.120.240.71',
                port: 80,
                path: `/api/services/${service.id}`,
                method: 'DELETE',
                headers: {
                    'Cookie': authCookies.admin
                }
            });
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        }
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
async function runComprehensiveTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ API...\n');
    
    const tests = [
        testAllRolesAuth,
        testOrderCreationByRoles,
        testRoleBasedAccess,
        testOrderCRUD,
        testUserProfile,
        testUserManagement,
        testServicesManagement,
        testSearchAndFilter,
        testOrderHistory,
        testPerformance
    ];
    
    let passed = 0;
    let total = tests.length;
    
    try {
        for (const test of tests) {
            try {
                const result = await test();
                if (result) passed++;
                console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            } catch (error) {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
                console.log('');
            }
        }
    } finally {
        // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await cleanupTestData();
    }
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${total - passed}/${total}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passed / total) * 100)}%`);
    
    if (passed === total) {
        console.log('\nüéâ –í–°–ï –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
        process.exit(0);
    } else {
        console.log('\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨!');
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    runComprehensiveTests().catch(console.error);
}

module.exports = {
    runComprehensiveTests,
    testAllRolesAuth,
    testOrderCreationByRoles,
    testRoleBasedAccess,
    testOrderCRUD,
    testUserProfile,
    testUserManagement,
    testServicesManagement,
    testSearchAndFilter,
    testOrderHistory,
    testPerformance
};
